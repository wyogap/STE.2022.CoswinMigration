-- MIGRATION.STE_MIGRATION_LOGS definition

CREATE TABLE "MIGRATION"."STE_MIGRATION_LOGS"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "PACKAGE_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "VERSION" VARCHAR(10 OCTETS) , 
		  "HOSTNAME" VARCHAR(250 OCTETS) , 
		  "START_DATE" TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP , 
		  "END_DATE" TIMESTAMP , 
		  "START_ID" VARCHAR(250 OCTETS) , 
		  "END_ID" VARCHAR(250 OCTETS) , 
		  "SUCCESS" INTEGER NOT NULL WITH DEFAULT 0 )   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE "MIGRATION"."STE_MIGRATION_LOGS" ALTER COLUMN "ID" RESTART WITH 21;

CREATE TABLE "MIGRATION"."STE_MIGRATION_LOG_DETAILS"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "PACKAGE_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "LOG_ID" BIGINT NOT NULL , 
		  "EVENT" VARCHAR(250 OCTETS) NOT NULL , 
		  "EVENT_TYPE" VARCHAR(250 OCTETS) , 
		  "EVENT_DESCRIPTION" VARCHAR(2000 OCTETS) , 
		  "TIMESTAMP" TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP )   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE "MIGRATION"."STE_MIGRATION_LOG_DETAILS" ALTER COLUMN "ID" RESTART WITH 61;

CREATE TABLE "MIGRATION"."STE_MIGRATION_PARAMS"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "PACKAGE_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "PARAMETER_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "PARAMETER_VALUE" VARCHAR(250 OCTETS) NOT NULL , 
		  "CREATED_ON" TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP , 
		  "CREATED_BY" VARCHAR(250 OCTETS) , 
		  "MODIFIED_ON" TIMESTAMP , 
		  "MODIFIED_BY" VARCHAR(250 OCTETS) )   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE "MIGRATION"."STE_MIGRATION_PARAMS" ALTER COLUMN "ID" RESTART WITH 21;

-- MIGRATION.STE_MIGRATION_USER_LOOKUP definition

CREATE SEQUENCE MIGRATION.MAXSEQ START WITH 1 INCREMENT BY 1;

CREATE TABLE "MIGRATION"."STE_MIGRATION_USER_LOOKUP"  (
		  "PKEY" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "DISPLAY_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "PERSONID" VARCHAR(50 OCTETS) NOT NULL , 
		  "PERSISTENT" INTEGER NOT NULL , 
		  "STATUS" INTEGER NOT NULL , 
		  "ROWSTAMP" BIGINT NOT NULL , 
		  "STE_MIGRATIONID" BIGINT , 
		  "DM_TEST" VARCHAR(10 OCTETS) , 
		  "ID" BIGINT )   
		 IN "MAXDATA"  
		 ORGANIZE BY ROW;

ALTER TABLE "MIGRATION"."STE_MIGRATION_USER_LOOKUP" ALTER COLUMN "PKEY" RESTART WITH 30121;

CREATE TRIGGER MIGRATION.STE_MIGRATION_US_T NO CASCADE BEFORE INSERT ON
MIGRATION.STE_MIGRATION_USER_LOOKUP
REFERENCING NEW AS N FOR EACH ROW MODE DB2SQL SET N.ROWSTAMP = NEXTVAL
FOR MIGRATION.MAXSEQ;

CREATE TRIGGER MIGRATION.STE_MIGRATION_US_U NO CASCADE BEFORE UPDATE ON
MIGRATION.STE_MIGRATION_USER_LOOKUP
REFERENCING NEW AS N FOR EACH ROW MODE DB2SQL SET N.ROWSTAMP = NEXTVAL
FOR MIGRATION.MAXSEQ;

-- MIGRATION.STE_MIGRATION_DELTA_LOGS definition

CREATE TABLE "MIGRATION"."STE_MIGRATION_DELTA_LOGS"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "TABLE_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "COSWIN_KEY" BIGINT NOT NULL , 
		  "MAXIMO_KEY" BIGINT NOT NULL , 
		  "REF_NAME" VARCHAR(50 OCTETS) , 
		  "ACTION" VARCHAR(10 OCTETS) , 
		  "TIMESTAMP" TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP
 			)   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE "MIGRATION"."STE_MIGRATION_DELTA_LOGS" ALTER COLUMN "ID" RESTART WITH 21;

-- SBST ITEM MASTER
CREATE TABLE "MIGRATION"."SBST_ITEM_MASTER"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  CoswinItemNo VARCHAR(30 OCTETS),	
		  MaximoItemNum VARCHAR(30 OCTETS),	
		  Description VARCHAR(110 OCTETS),	
		  "System" VARCHAR(16 OCTETS),
		  "Subsystem" VARCHAR(16 OCTETS),
		  "STE_ITEMPARTNO" VARCHAR(60 OCTETS),
		  "ItemType" VARCHAR(30 OCTETS),
		  "Rotating" INTEGER,
		  "LotType" VARCHAR(16 OCTETS),
		  "STE_OWNERDEPARTMENT" VARCHAR(30 OCTETS),
		  "STE_SEVERITY" INTEGER,
		  "STE_IS_CRITICAL" INTEGER,
		  "STE_SPARECRITICAL" VARCHAR(1 OCTETS),
		  "STE_IS_SAFETY_RELATED" INTEGER,
		  "ORDERUNIT" VARCHAR(16 OCTETS),
		  "STE_MAINTTYPE" VARCHAR(16 OCTETS)
 			)   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE "MIGRATION"."SBST_ITEM_MASTER" ALTER COLUMN "ID" RESTART WITH 21;

ALTER TABLE MIGRATION.SBST_ITEM_MASTER ADD CONSTRAINT SBST_ITEM_MASTER_UNIQUE UNIQUE (ID);
CREATE UNIQUE INDEX SBST_ITEM_MASTER_ID_IDX ON MIGRATION.SBST_ITEM_MASTER (ID);
CREATE INDEX SBST_ITEM_MASTER_LOTTYPE_IDX ON MIGRATION.SBST_ITEM_MASTER ("LotType");


-- SBST DEBUGGING
CREATE TABLE "MIGRATION"."STE_MIGRATION_DEBUG_LOG"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "PACKAGE_NAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "LOG_ID" BIGINT NOT NULL , 
		  "LOG_TYPE" VARCHAR(250 OCTETS) , 
		  col1 VARCHAR(110 OCTETS),	
		  COL2 VARCHAR(110 OCTETS),	
		  COL3 VARCHAR(110 OCTETS),	
		  COL4 VARCHAR(110 OCTETS),	
		  COL5 VARCHAR(110 OCTETS),
		  "TIMESTAMP" TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP
 			)   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;
		 
CREATE OR REPLACE PROCEDURE MIGRATION.STE_UPDATE_SEQ(
	IN P_SEQNAME VARCHAR(50), IN P_TABLENAME VARCHAR(50),
	IN P_COLNAME VARCHAR(50)
)
LANGUAGE SQL
SPECIFIC STE_UPDATE_SEQ
BEGIN
	
	DECLARE V_MAXID BIGINT DEFAULT 1198;
	DECLARE V_SQL VARCHAR(8000);

	DECLARE cursor1 CURSOR WITH RETURN FOR SQL_SELECT;

	SET V_SQL = 'SELECT ISNULL(MAX(' ||P_COLNAME|| '),0)+1 AS MAXID FROM MAXIMO.' ||P_TABLENAME;

	PREPARE SQL_SELECT FROM V_SQL;

	OPEN cursor1;
	FETCH cursor1 INTO V_MAXID;
	CLOSE cursor1;

	SET V_SQL = 'ALTER SEQUENCE MAXIMO.' ||P_SEQNAME|| ' RESTART WITH ' ||V_MAXID;

	PREPARE SQL_UPDATE FROM V_SQL;
	EXECUTE SQL_UPDATE;

	SET V_SQL = 'update maximo.maxsequence set maxreserved=' ||V_MAXID|| ' where tbname=''' ||P_TABLENAME|| ''' and name=''' ||P_COLNAME|| '''';

	PREPARE SQL_UPDATE FROM V_SQL;
	EXECUTE SQL_UPDATE;

END;

-- SELECT MAX(LOCATIONSID)+1 AS MAXID FROM MAXIMO.LOCATIONS;
-- select next value for MAXIMO.LOCATIONSSEQ from SYSIBM.SYSDUMMY1;
-- ALTER SEQUENCE MAXIMO.LOCATIONSSEQ RESTART WITH 5000;
-- CALL MIGRATION.STE_UPDATE_SEQ('MAXIMO.LOCATIONSSEQ', 'MAXIMO.LOCATIONS', 'LOCATIONSID');

-- COST CENTER INVALID MAPPING
CREATE TABLE "MIGRATION"."SBST_COSTCENTER_INVALID_MAPPING"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "COSWIN_CC" VARCHAR(250 OCTETS) NOT NULL , 
		  "MAXIMO_CC" VARCHAR(10 OCTETS) NOT NULL
 			)   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;
		 
CREATE TABLE "MIGRATION"."SBST_USER_DISPLAYNAME_MAPPING"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "DISPLAYNAME" VARCHAR(250 OCTETS) NOT NULL , 
		  "USERID" VARCHAR(50 OCTETS) NOT NULL
 			)   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;		
		 
CREATE TABLE "MIGRATION"."SBST_SYSTEM_DEPT_MAPPING"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "SYSTEM" VARCHAR(50 OCTETS) NOT NULL , 
		  "DEPT" VARCHAR(50 OCTETS) NOT NULL
 			)   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;		
		 	
CREATE TABLE "MIGRATION"."SBST_ASSET_MASTER"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "COSWINASSETID" VARCHAR(40 OCTETS) NOT NULL , 
		  "COSWINEQPTCODE" VARCHAR(25 OCTETS),
		  "LINE" VARCHAR(4 OCTETS),
		  "DEPOT" VARCHAR(10 OCTETS),
		  "DEPOTBUILDING" VARCHAR(10 OCTETS),
		  "STATION" VARCHAR(10 OCTETS),
		  "LEVEL" VARCHAR(10 OCTETS),
		  "AREA" VARCHAR(30 OCTETS),
		  "SYSTEM" VARCHAR(10 OCTETS),
		  "SUBSYSTEM" VARCHAR(10 OCTETS),
		  "DETAILCODE" VARCHAR(25 OCTETS),
		  "SHEET" VARCHAR(20 OCTETS)
 			)   
 		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;
		 
ALTER TABLE MIGRATION.SBST_ASSET_MASTER ADD LOCATION VARCHAR(16);
ALTER TABLE MIGRATION.SBST_ASSET_MASTER ADD LOCATIONID BIGINT;

CREATE UNIQUE INDEX SBST_ASSET_MASTER_ID_IDX ON MIGRATION.SBST_ASSET_MASTER (ID);
ALTER TABLE MIGRATION.SBST_ASSET_MASTER ADD CONSTRAINT SBST_ASSET_MASTER_UQ UNIQUE (ID);
CREATE INDEX SBST_ASSET_MASTER_COSWINASSETID_IDX ON MIGRATION.SBST_ASSET_MASTER (COSWINASSETID);

CREATE TABLE "MIGRATION"."SBST_LOCATION_MASTER"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "LOCATIONCODE" VARCHAR(50 OCTETS) NOT NULL , 
		  "TYPE" VARCHAR(25 OCTETS),
		  "LINE" VARCHAR(25 OCTETS),
		  "DESCRIPTION" VARCHAR(100 OCTETS),
		  "BUILDING" VARCHAR(50 OCTETS),
		  "LEVEL" VARCHAR(10 OCTETS),
		  "AREA" VARCHAR(30 OCTETS),
		  "STATION" VARCHAR(10 OCTETS),
		  "DEPOT" VARCHAR(10 OCTETS)
 			)   
 		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE MIGRATION.SBST_LOCATION_MASTER ADD CONSTRAINT SBST_LOCATION_MASTER_UNIQUE UNIQUE (ID);
CREATE UNIQUE INDEX SBST_LOCATION_MASTER_ID_IDX ON MIGRATION.SBST_LOCATION_MASTER (ID);
CREATE UNIQUE INDEX SBST_LOCATION_MASTER_LOCATIONCODE_IDX ON MIGRATION.SBST_LOCATION_MASTER (LOCATIONCODE);

CREATE TABLE "MIGRATION"."STE_MAXDOMAIN_VALIDATION"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "DOMAINID" VARCHAR(50 OCTETS) NOT NULL , 
		  "DESCRIPTION" VARCHAR(100 OCTETS),
		  "DOMAINTYPE" VARCHAR(50 OCTETS),
		  "MAXTYPE" VARCHAR(10 OCTETS),
		  "TABLE" VARCHAR(250 OCTETS),
		  "COLUMN" VARCHAR(50 OCTETS)
 			)   
 		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE MIGRATION.STE_MAXDOMAIN_VALIDATION ADD CONSTRAINT STE_MAXDOMAIN_VALIDATION_UNIQUE UNIQUE (ID);
CREATE UNIQUE INDEX STE_MAXDOMAIN_VALIDATION_ID_IDX ON MIGRATION.STE_MAXDOMAIN_VALIDATION (ID);
CREATE INDEX STE_MAXDOMAIN_VALIDATION_DOMAINID_IDX ON MIGRATION.STE_MAXDOMAIN_VALIDATION (DOMAINID);

CREATE TABLE "MIGRATION"."STE_MAXDOMAIN_VALIDATION_LOG"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "DOMAINID" VARCHAR(50 OCTETS) NOT NULL , 
		  "VALUE" VARCHAR(50 OCTETS),
		  "TABLE" VARCHAR(50 OCTETS),
		  "COLUMN" VARCHAR(50 OCTETS),
		  "TIMESTAMP" TIMESTAMP NOT NULL WITH DEFAULT CURRENT TIMESTAMP
 			)   
 		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE MIGRATION.STE_MIGRATION_LOGS ADD HOSTNAME VARCHAR(100);

CREATE TABLE "MIGRATION"."STE_TABLE_VALIDATION"  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "OWNER" VARCHAR(50 OCTETS) NOT NULL , 
		  "TABLE_NAME" VARCHAR(50 OCTETS),
		  "TABLE_DESCRIPTION" VARCHAR(4000 OCTETS),
		  "TYPE" VARCHAR(50 OCTETS),
		  "MIGRATED" VARCHAR(10 OCTETS),
		  "MAXIMO_TABLE" VARCHAR(50 OCTETS),
		  "SSIS_PACKAGE" VARCHAR(50 OCTETS),
		  "NOTES" VARCHAR(4000 OCTETS),
		  "COSWIN_COUNT" INTEGER,
		  "MAXIMO_COUNT" INTEGER,
		  "ADDITIONAL_NOTES" VARCHAR(4000 OCTETS)
 			)   
 		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

ALTER TABLE MIGRATION.STE_TABLE_VALIDATION ADD CONSTRAINT STE_TABLE_VALIDATION_UNIQUE UNIQUE (ID);
CREATE UNIQUE INDEX STE_TABLE_VALIDATION_ID_IDX ON MIGRATION.STE_TABLE_VALIDATION (ID);
CREATE UNIQUE INDEX STE_TABLE_VALIDATION_OWNER_IDX ON MIGRATION.STE_TABLE_VALIDATION (OWNER,TABLE_NAME);
CREATE INDEX STE_TABLE_VALIDATION_TABLE_NAME_IDX ON MIGRATION.STE_TABLE_VALIDATION (TABLE_NAME);
CREATE INDEX STE_TABLE_VALIDATION_TYPE_IDX ON MIGRATION.STE_TABLE_VALIDATION ("TYPE");
CREATE INDEX STE_TABLE_VALIDATION_MIGRATED_IDX ON MIGRATION.STE_TABLE_VALIDATION (MIGRATED);
		
CREATE TABLE "MIGRATION".DBG_ROWSTAMP_SNAPSHOT  (
		  "ID" BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (  
		    START WITH +1  
		    INCREMENT BY +1  
		    MINVALUE +1  
		    MAXVALUE +9223372036854775807  
		    NO CYCLE  
		    CACHE 20  
		    NO ORDER ) , 
		  "DOMAIN" VARCHAR(50 OCTETS) , 
		  "TABLE" VARCHAR(250 OCTETS) NOT NULL , 
		  "TAG" VARCHAR(10 OCTETS) , 
		  "ROWSTAMP" BIGINT 
		 )   
		 IN "USERSPACE1"  
		 ORGANIZE BY ROW;

--#SET TERMINATOR /
		
CREATE OR REPLACE PROCEDURE MIGRATION.STE_DBG_ROWSTAMP_SNAPSHOT(
	IN P_DOMAIN VARCHAR(50), IN P_TAG VARCHAR(10), IN P_COLNAME VARCHAR(250)
)
LANGUAGE SQL
SPECIFIC STE_DBG_ROWSTAMP_SNAPSHOT
BEGIN
   	DECLARE v_counter INTEGER DEFAULT 0;
	DECLARE v_sql VARCHAR(8000);
	DECLARE v_table VARCHAR(250);

	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT a.tabname
		FROM (
			select DISTINCT tabname
			from syscat.columns
			where tabschema='MAXIMO' 
				AND colname = P_COLNAME
		) a 
		JOIN (
			select tabname, sum(CASE WHEN colname='ROWSTAMP' THEN 1 ELSE 0 END) AS cnt
			from syscat.columns
			where tabschema='MAXIMO' 
			GROUP BY tabname
		) b ON b.tabname=a.tabname AND b.cnt>0
		order by a.tabname;

	DECLARE CONTINUE HANDLER FOR NOT FOUND
		SET v_counter = -1;

	IF (P_COLNAME IS NULL) THEN SET P_COLNAME='ROWSTAMP';
	END IF;

	SET P_COLNAME=UPPER(P_COLNAME);
	SET P_TAG=UPPER(P_TAG);
	SET P_DOMAIN=UPPER(P_DOMAIN);

	OPEN cursor1;
	
	fetch_loop:
	LOOP
		SET v_counter=0;
	
		FETCH FROM cursor1
		INTO v_table;

		IF (v_counter =-1) THEN LEAVE fetch_loop; 
		END IF;

		SET v_sql = 'INSERT INTO MIGRATION.DBG_ROWSTAMP_SNAPSHOT (DOMAIN, TABLE, TAG, ROWSTAMP)';
		SET v_sql = v_sql || ' SELECT ''' || P_DOMAIN || ''' AS DOMAIN, ''' || v_table || ''' AS TABLE, ''' || P_TAG || ''' AS TAG, MAX(ROWSTAMP) AS ROWSTAMP';
		SET v_sql = v_sql || ' FROM MAXIMO.' || v_table;
	
		-- CALL DBMS_OUTPUT.PUT_LINE(v_sql);

		PREPARE SQL_UPDATE FROM v_sql;
		EXECUTE SQL_UPDATE;

	END LOOP fetch_loop;

	CLOSE cursor1;

END;
/

--#SET TERMINATOR /
		
CREATE OR REPLACE PROCEDURE MIGRATION.STE_DBG_SHOW_CHANGES(
	IN P_DOMAIN VARCHAR(50), IN P_TAG_PRE VARCHAR(10), IN P_TAG_POST VARCHAR(10)
)
LANGUAGE SQL
SPECIFIC STE_DBG_SHOW_CHANGES
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN

   	DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
		SELECT A.TABLE, A.ROWSTAMP AS PRE_ROWSTAMP, B.ROWSTAMP AS POST_ROWSTAMP 
		FROM MIGRATION.DBG_ROWSTAMP_SNAPSHOT A
		JOIN MIGRATION.DBG_ROWSTAMP_SNAPSHOT B ON A.TABLE=B.TABLE AND B.DOMAIN=A.DOMAIN AND B.TAG=P_TAG_POST
		WHERE A.DOMAIN=P_DOMAIN AND A.TAG=P_TAG_PRE
			AND ISNULL(A.ROWSTAMP,0)!=ISNULL(B.ROWSTAMP,0);

	SET P_DOMAIN=UPPER(P_DOMAIN);
	SET P_TAG_PRE=UPPER(P_TAG_PRE);
	SET P_TAG_POST=UPPER(P_TAG_POST);

	OPEN C1;
END;
/

--#SET TERMINATOR /

CREATE OR REPLACE PROCEDURE MIGRATION.STE_VALIDATE_MAXDOMAIN()
LANGUAGE SQL
SPECIFIC STE_VALIDATE_MAXDOMAIN
BEGIN
   	DECLARE v_counter INTEGER DEFAULT 0;
	DECLARE V_SQL VARCHAR(8000);
	DECLARE V_SQL2 VARCHAR(8000);
	DECLARE v_domainid VARCHAR(50);
	DECLARE v_domaintype VARCHAR(50);
	DECLARE v_table VARCHAR(50);
	DECLARE v_column VARCHAR(50);

	DECLARE cursor1 CURSOR WITH RETURN FOR
		SELECT
		   v.domainid,
		   v.domaintype,
		   TRIM(si.item) AS tab,
		   v.COLUMN AS col
		FROM 
			MIGRATION.STE_MAXDOMAIN_VALIDATION v
			, XMLTABLE('$doc/items/item'
		          PASSING XMLPARSE(DOCUMENT CAST('<items><item><value>' || replace(v.table, ',', '</value></item><item><value>')|| '</value></item></items>' AS CLOB)) AS "doc"
		          COLUMNS
		          ITEM VARCHAR(255) PATH 'value'
			) si
		WHERE v.TABLE IS NOT NULL
		   AND v.COLUMN IS NOT NULL;

	DECLARE CONTINUE HANDLER FOR NOT FOUND
		SET v_counter = -1;

	DELETE FROM MIGRATION.STE_MAXDOMAIN_VALIDATION_LOG;
	
	OPEN cursor1;

	fetch_loop:
	LOOP
		SET v_counter=0;
	
		FETCH FROM cursor1
		INTO v_domainid, v_domaintype, v_table, v_column;

		IF (v_counter =-1) THEN LEAVE fetch_loop; END IF;

		IF (v_domaintype = 'SYNONYM') THEN
			SET V_SQL = 'INSERT INTO MIGRATION.STE_MAXDOMAIN_VALIDATION_LOG (DOMAINID, VALUE, TABLE, COLUMN) ';
			SET V_SQL = V_SQL || ' SELECT ''' || v_domainid || ''' AS DOMAINID, a.VALUE, ''' || v_table || ''' AS TAB, ''' || v_column || ''' AS COL';
			SET V_SQL = V_SQL || ' FROM ( SELECT DISTINCT ' || v_column || ' AS VALUE FROM MAXIMO.' || v_table || ' WHERE ' || v_column || ' IS NOT NULL ) a';
			SET V_SQL = V_SQL || ' LEFT JOIN MAXIMO.SYNONYMDOMAIN s ON s.DOMAINID=''' || v_domainid || ''' AND s.VALUE=a.VALUE';
			SET V_SQL = V_SQL || ' LEFT JOIN MIGRATION.STE_MAXDOMAIN_VALIDATION_LOG l ON l.DOMAINID=''' || v_domainid || ''' AND l.VALUE=a.VALUE';
			SET V_SQL = V_SQL || ' WHERE s.SYNONYMDOMAINID IS NULL AND l.ID IS NULL;';
		ELSEIF (v_domaintype = 'ALN') THEN
			SET V_SQL = 'INSERT INTO MIGRATION.STE_MAXDOMAIN_VALIDATION_LOG (DOMAINID, VALUE, TABLE, COLUMN) ';
			SET V_SQL = V_SQL || ' SELECT ''' || v_domainid || ''' AS DOMAINID, a.VALUE, ''' || v_table || ''' AS TAB, ''' || v_column || ''' AS COL';
			SET V_SQL = V_SQL || ' FROM ( SELECT DISTINCT ' || v_column || ' AS VALUE FROM MAXIMO.' || v_table || ' WHERE ' || v_column || ' IS NOT NULL ) a';
			SET V_SQL = V_SQL || ' LEFT JOIN MAXIMO.ALNDOMAIN s ON s.DOMAINID=''' || v_domainid || ''' AND s.VALUE=a.VALUE';
			SET V_SQL = V_SQL || ' LEFT JOIN MIGRATION.STE_MAXDOMAIN_VALIDATION_LOG l ON l.DOMAINID=''' || v_domainid || ''' AND l.VALUE=a.VALUE';
			SET V_SQL = V_SQL || ' WHERE s.ALNDOMAINID IS NULL AND l.ID IS NULL; ';
		ELSEIF (v_domaintype = 'TABLE') THEN
			-- TODO
			SET V_SQL = '';
		ELSE
			-- NOTHING
			SET V_SQL = '';
		END IF;

		-- CALL DBMS_OUTPUT.PUT_LINE(V_SQL);

		IF (V_SQL != '') THEN
			PREPARE SQL_UPDATE FROM V_SQL;
			EXECUTE SQL_UPDATE;
		END IF;

	END LOOP fetch_loop;

	CLOSE cursor1;

END;
/