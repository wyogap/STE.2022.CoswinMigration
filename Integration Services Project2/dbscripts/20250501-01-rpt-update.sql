CALL MIGRATION.STE_START_PATCH('20250501-01-RPT-UPDATE');

-- STOCK ISSUE
CREATE OR REPLACE VIEW MAXIMO.STE_RPT_STOCK_ISSUE AS
SELECT 
	'2.1' AS VERSION
	, mut.MR_STE_MIGRATIONID AS PK_DEM_ISS, mut.STE_MIGRATIONID AS PK_ISS_ITEMS
	, mut.MRID
	, mut.MATUSETRANSID AS Issue_Num
	, mut.STE_ISSUENUM AS Coswin_Issue_Num
	, i.STE_LINE AS Line
	, i.STE_OWNERDEPARTMENT AS Dept
	, i.STE_CSWNAUTHORITY AS Authority_Code
	, i.ITEMNUM AS ITEMNUM
	, i.STE_CSWNITEMNO AS Coswin_Item_Code
	, i.DESCRIPTION AS Item_Description
	, i.STE_ITEMGROUP AS Group_Code
	, aln.DESCRIPTION AS Group_Description
	--, concat(i.STE_ITEMGROUP, CONCAT(' - ', aln.DESCRIPTION)) AS Group_Code_Description
	, i.STE_CSWNITEMCAT AS Category_Code
	, mut.ACTUALDATE AS Issue_Date
	, -1 * mut.QUANTITY AS Issued_Qty
	, ret.QUANTITY AS Returned_Qty
	, ret.ACTUALDATE AS Return_Date
	, mut.MRNUM
	, mut.MR_STE_CSWNDEMREF AS Coswin_Demand_No
	, mut.GLCREDITACCT  
	, mut.GLDEBITACCT  
	, mut.Costcentre
	, mut.MR_STE_CSWNCC AS Coswin_CC_Code
	, gl.COMPTEXT AS CostCentre_Description
	, mut.MR_REQUESTEDBY AS REQUESTEDBY
	, p.DISPLAYNAME AS Requester
	, mut.MR_STE_MIGRATIONDEMANDER AS Coswin_Requester
	, i.ISSUEUNIT
	, mut.CURBAL
	, COALESCE(inv.CURBAL,0) AS Inventory_CURBAL
	, mut.MR_WONUM AS WONUM
	, wo.STE_CSWNWOID AS Coswin_WOID
	, mut.MR_STE_REMARKS AS Remarks
	, mut.MR_ENTERDATE AS Enter_Date
	, mut.LINECOST AS Issue_Value
	, ret.LINECOST AS Return_Value
	, mut.UNITCOST
	, mut.CURRENCYCODE
	, mut.MR_STATUS AS STATUS
	, i.STE_CSWNITEMCAT
	, coalesce(debitsapgl.SAPGL,'432101') AS DEBITSAPGL
	, creditsapgl.SAPGL AS CREDITSAPGL
	, iu.INVUSENUM
	, mut.MR_GLDEBITACCT
	, mut.MR_COSTCENTRE
FROM (
	SELECT mut.* 
	, CASE WHEN mut.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(mut.GLDEBITACCT) - length(replace(mut.GLDEBITACCT,'-','')) >= 2 THEN
				SUBSTR(mut.GLDEBITACCT, LOCATE('-', mut.GLDEBITACCT)+1, LOCATE('-', mut.GLDEBITACCT, LOCATE('-', mut.GLDEBITACCT)+1)-LOCATE('-', mut.GLDEBITACCT)-1)
		   ELSE SUBSTR(mut.GLDEBITACCT, LOCATE('-', mut.GLDEBITACCT)+1)
	  END AS Costcentre
	--, CASE WHEN mut.GLDEBITACCT IS NULL THEN NULL
	--       WHEN length(mut.GLDEBITACCT) - length(replace(mut.GLDEBITACCT,'-','')) < 2 THEN NULL
	--	   ELSE SUBSTR(mut.GLDEBITACCT, LOCATE('-', mut.GLDEBITACCT, LOCATE('-', mut.GLDEBITACCT)+1)+1)
	--  END AS SAP_GL_CODE
	, m.MRID
	, m.STE_MIGRATIONID AS MR_STE_MIGRATIONID
	, m.STE_CSWNDEMREF AS MR_STE_CSWNDEMREF
	, m.STE_CSWNCC AS MR_STE_CSWNCC
	, m.STE_MIGRATIONDEMANDER AS MR_STE_MIGRATIONDEMANDER
	, m.REQUESTEDBY AS MR_REQUESTEDBY
	, m.WONUM AS MR_WONUM
	, m.STE_REMARKS AS MR_STE_REMARKS
	, m.ENTERDATE AS MR_ENTERDATE
	, m.STATUS AS MR_STATUS
	, m.GLDEBITACCT AS MR_GLDEBITACCT
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(m.GLDEBITACCT) - length(replace(m.GLDEBITACCT,'-','')) >= 2 THEN
				SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1, LOCATE('-', m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)-LOCATE('-', m.GLDEBITACCT)-1)
		   ELSE SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)
	  END AS MR_COSTCENTRE
	--, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	--       WHEN length(m.GLDEBITACCT) - length(replace(m.GLDEBITACCT,'-','')) < 2 THEN NULL
	--	   ELSE SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)+1)
	--  END AS MR_SAP_GL_CODE
	FROM MAXIMO.MATUSETRANS mut 
	JOIN MAXIMO.MR m ON mut.MRNUM=m.MRNUM 
) mut
--JOIN MAXIMO.MR m ON mut.MRNUM=m.MRNUM 
JOIN MAXIMO.ITEM i ON i.ITEMNUM=mut.ITEMNUM
LEFT JOIN MAXIMO.INVUSE iu ON iu.INVUSEID=mut.INVUSEID
--LEFT JOIN MAXIMO.CHARTOFACCOUNTS coa ON coa.GLACCOUNT=mut.GLDEBITACCT
LEFT JOIN MAXIMO.GLCOMPONENTS gl ON gl.GLORDER=1 AND gl.COMPVALUE=mut.MR_COSTCENTRE
LEFT JOIN MAXIMO.ALNDOMAIN aln ON aln.DOMAINID='STE_ITEMGROUP' AND aln.VALUE=i.STE_ITEMGROUP
LEFT JOIN MAXIMO.PERSON p ON p.PERSONID=mut.MR_REQUESTEDBY
LEFT JOIN MAXIMO.MATUSETRANS ret ON ret.ISSUETYPE='RETURN' 
	AND ret.MRNUM=mut.MRNUM AND ret.ITEMNUM=mut.ITEMNUM
	--AND ret.ACTUALDATE BETWEEN '2023-01-01' AND '2023-12-31'
LEFT JOIN MAXIMO.WORKORDER wo ON wo.WONUM=mut.MR_WONUM
LEFT JOIN (
	SELECT ITEMNUM, SUM(CURBAL) AS CURBAL
	FROM MAXIMO.INVBALANCES
	GROUP BY ITEMNUM
) inv ON inv.ITEMNUM=mut.ITEMNUM
-- SAPGL for debit (40) is based on ITEM GROUP 
LEFT JOIN (
	VALUES('403801', 'BATTERY'),
			('432301', 'CHEMICAL'),
			('432250', 'CM'),
			('432150', 'DIRPURCH'),
			('432301', 'HAZARDOUS'),
			('413101', 'OFSUPPLIES'),
			('403401', 'POL'),
			('441200', 'PUBLICATION'),
			('441200', 'PUBLICATIO'),
			('435901', 'REPAIRWORK'),
			('431150', 'SAFETY'),
			('432401', 'TOOLS'),
			('432401', 'TOOS'),
			('403601', 'TYRES'),
			('432351', 'PAINTS'),
			('434160', 'CS'),
			('434160', 'NS'),
			('434160', 'C7'),
			('434160', 'ND'),
			('435650', 'OTHERS'),
			('440700', 'FREIGHT'),
			('432101', 'DEFAULT')
) AS debitsapgl(sapgl, itemgroup) ON debitsapgl.itemgroup=i.ste_itemgroup
-- SAPGL for credit (50) is based on ITEM CATEGORY
LEFT JOIN (
	VALUES('113602', 'SG_OEM_PWR'),
			('113603', 'SG_OEM_COM'),
			('113604', 'SG_OEM_SYS'),
			('113605', 'SG_OEM_RST'),
			('113606', 'SG_OEM_SIG'),
			('113607', 'SG_OEM_PWY'),
			('113608', 'SG_OEM_PMT'),
			('113610', 'SG_CONSUME'),
			('113612', 'SG_OEM_LRT'),
			('113611', 'SG_LRU')
) AS creditsapgl(sapgl, itemcat) ON creditsapgl.itemcat=i.ste_cswnitemcat
WHERE 1=1
	AND mut.ISSUETYPE='ISSUE'	--49
	AND i.STE_CSWNITEMCAT <> 'SG_FAS'
	--AND mut.ACTUALCOST >= 0.02
	--AND mut.ACTUALDATE BETWEEN '2023-01-01' AND '2023-12-31'
	--AND coa.GLCOMP02!=m.STE_CSWNCC
	--AND m.MRNUM='MR00432425'
	--AND ret.QUANTITY>0
	--AND m.WONUM IS NOT NULL 
	--AND m.STE_REMARKS IS NOT null
;

-- ACCRUAL
CREATE OR REPLACE VIEW MAXIMO.STE_RPT_ACCRUAL_STK AS
SELECT
	'2.0' AS VERSION
	, m.STE_MIGRATIONID AS PK_RCT_ITEMS
	, m.PACKINGSLIPNUM AS PACKINGSLIPNUM
	, m.TRANSDATE AS TRANSDATE
	, m.LINECOST AS LINECOST
	, 'STK' AS STK_NS
	, m.ITEMNUM
	, i.STE_CSWNITEMNO AS COSWIN_ITEM_CODE
	, i.DESCRIPTION AS ITEM_DESCRIPTION
	, m.STE_CSWNGRNNUM AS GRNUM
	, m.STE_CSWNGRNDATE AS GRDATE
	, c.STE_CSWNSAPVNDCODE AS SAP_VENDOR_CODE
	, c.NAME AS SUPPLIER_NAME
	, m.GLDEBITACCT
	, m.COSTCENTER
	, m.SAP_GL_CODE
	--, coa.GLCOMP02 AS COSTCENTER 
	--, coa.GLCOMP03 AS SAP_GL_CODE 
	--, coalesce(pc.QUANTITY, m.STE_CSWNACPQTY) AS QUANTITY_PER_CC
	, CASE WHEN m.STATUSDATE<='2025-03-30' THEN COALESCE(m.STE_CSWNACPQTY, m.QUANTITY) 
		   ELSE m.QUANTITY
	  END AS QUANTITY
	, m.ORDERQTY
	, l.INVOICEQTY
	, t.ACCEPTEDQTY
	, m.STATUS
	, m.PL_GLDEBITACCT
	, m.PL_COSTCENTER
	, m.PL_SAP_GL_CODE
FROM (
	SELECT m.* 
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(m.GLDEBITACCT) - length(replace(m.GLDEBITACCT,'-','')) >= 2 THEN
				SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1, LOCATE('-', m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)-LOCATE('-', m.GLDEBITACCT)-1)
		   ELSE SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)
	  END AS COSTCENTER
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(m.GLDEBITACCT) - length(replace(m.GLDEBITACCT,'-','')) < 2 THEN NULL
		   ELSE SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)+1)
	  END AS SAP_GL_CODE
	, pl.ORDERQTY
	, pl.GLDEBITACCT AS PL_GLDEBITACCT
	, CASE WHEN pl.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(pl.GLDEBITACCT) - length(replace(pl.GLDEBITACCT,'-','')) >= 2 THEN
				SUBSTR(pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1, LOCATE('-', pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1)-LOCATE('-', pl.GLDEBITACCT)-1)
		   ELSE SUBSTR(pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1)
	  END AS PL_COSTCENTER
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(pl.GLDEBITACCT) - length(replace(pl.GLDEBITACCT,'-','')) < 2 THEN NULL
		   ELSE SUBSTR(pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1)+1)
	  END AS PL_SAP_GL_CODE
	FROM maximo.MATRECTRANS m
	JOIN maximo.POLINE pl ON pl.PONUM=m.PONUM AND pl.POLINENUM=m.POLINENUM AND pl.REVISIONNUM=m.POREVISIONNUM
) m
JOIN maximo.PO po ON po.PONUM=m.PONUM AND po.REVISIONNUM=m.POREVISIONNUM
JOIN maximo.COMPANIES c ON c.COMPANY=po.VENDOR 
JOIN maximo.ITEM i ON i.ITEMNUM=m.ITEMNUM
--JOIN maximo.POLINE pl ON pl.PONUM=m.PONUM AND pl.POLINENUM=m.POLINENUM AND pl.REVISIONNUM=m.POREVISIONNUM
LEFT JOIN maximo.CHARTOFACCOUNTS coa ON coa.GLACCOUNT=m.GLDEBITACCT
-- LEFT JOIN maximo.STE_CSWNRECEIPT_PER_CC pc ON pc.MATRECTRANSID=m.MATRECTRANSID
-- total invoiced
LEFT JOIN (
	SELECT l.PONUM, l.POLINENUM, l.POREVISIONNUM, SUM(INVOICEQTY) AS INVOICEQTY
	FROM maximo.INVOICELINE l
	GROUP BY l.PONUM, l.POLINENUM, l.POREVISIONNUM
) l ON l.PONUM=m.PONUM AND l.POLINENUM=m.POLINENUM AND l.POREVISIONNUM=m.POREVISIONNUM
-- total received and accepted
LEFT JOIN (
	SELECT m.PONUM, m.POLINENUM, m.POREVISIONNUM, SUM(m.QUANTITY) AS ACCEPTEDQTY
	FROM maximo.MATRECTRANS m
	GROUP BY m.PONUM, m.POLINENUM, m.POREVISIONNUM
) t ON t.PONUM=m.PONUM AND t.POLINENUM=m.POLINENUM AND t.POREVISIONNUM=m.POREVISIONNUM
-- Ideally we created records here for migrated data. But at the moment, none is created
LEFT JOIN maximo.INVOICEMATCH im ON im.MATRECTRANSID=m.MATRECTRANSID
WHERE 1=1
	AND m.ISSUETYPE IN ('RECEIPT')
	AND po.STATUS IN ('APPR', 'CLOSE')
	-- Accrual: Receipt which has not been invoiced
	AND COALESCE(l.INVOICEQTY,0) < m.ORDERQTY
	AND COALESCE(l.INVOICEQTY,0) < COALESCE(t.ACCEPTEDQTY,0)
	AND im.INVOICEMATCHID IS NULL
	-- valid qty
	AND (
		-- before migration, use ACP_QTY
		(m.STATUSDATE<='2025-03-30' AND COALESCE(m.STE_CSWNACPQTY, m.QUANTITY) > 0)
		-- after migration, use QUANTITY
		OR (m.STATUSDATE>'2025-03-30' AND m.QUANTITY>0)
	)
	--AND m.INSPECTEDQTY <> m.REJECTQTY
	-- Valid SAPGL
	--AND ( coa.GLCOMP03 IS NOT NULL ) 
	--AND ( coa.GLCOMP03 BETWEEN '100000' AND '299999' ) 
	--AND ( coa.GLCOMP03 <> '113601' ) 
	-- Valid costcenter: not necessary since now costcenter is part of GLDEBITACCT
	--AND ( coa.GLCOMP02 IS NOT NULL ) 
	-- LEGACY FROM COSWIN: receiptval > 0
	AND m.LINECOST>0
	-- LEGACY FROM COSWIN: receiptstatus != fully invoiced
	AND ( CHR(COALESCE(m.STE_CSWNRCTSTATUS,50)) <> '3' )	-- 51
	-- LEGACY FROM COSWIN
	AND ( m.PONUM <> 'EE10005692' ) 
	AND ( m.PONUM <> 'EE10005693' )  
	AND ( coalesce(m.STE_CSWNRCTQTY,1) <> coalesce(m.STE_CSWNRTNTOSUPL,0) )  
	AND m.STATUS NOT IN ('WINSP', 'WASSET')
;

CREATE OR REPLACE VIEW MAXIMO.STE_RPT_ACCRUAL_NS AS
SELECT
	'2.0' AS VERSION
	, m.STE_MIGRATIONID AS PK_RCT_ITEMS
	, m.PACKINGSLIPNUM AS PACKINGSLIPNUM
	, m.TRANSDATE AS TRANSDATE
	, m.LINECOST AS LINECOST
	, 'NS' AS STK_NS
	, m.ITEMNUM
	, i.STE_CSWNITEMNO AS COSWIN_ITEM_CODE
	, i.DESCRIPTION AS ITEM_DESCRIPTION
	, m.STE_CSWNGRNNUM AS GRNUM
	, m.STE_CSWNGRNDATE AS GRDATE
	, c.STE_CSWNSAPVNDCODE AS SAP_VENDOR_CODE
	, c.NAME AS SUPPLIER_NAME
	, m.GLDEBITACCT
	, m.COSTCENTER
	, m.SAP_GL_CODE
	--, coa.GLCOMP02 AS COSTCENTER 
	--, coa.GLCOMP03 AS SAP_GL_CODE 
	--, coalesce(pc.QUANTITY, m.STE_CSWNACPQTY) AS QUANTITY_PER_CC
	, CASE WHEN m.TRANSDATE<='2025-03-30' THEN COALESCE(m.STE_CSWNACPQTY, m.QUANTITY) 
		   ELSE m.QUANTITY
	  END AS QUANTITY
	, m.ORDERQTY
	, l.INVOICEQTY
	, t.ACCEPTEDQTY
	, m.STATUS
	, m.PL_GLDEBITACCT
	, m.PL_COSTCENTER
	, m.PL_SAP_GL_CODE
FROM (
	SELECT m.* 
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(m.GLDEBITACCT) - length(replace(m.GLDEBITACCT,'-','')) >= 2 THEN
				SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1, LOCATE('-', m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)-LOCATE('-', m.GLDEBITACCT)-1)
		   ELSE SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)
	  END AS COSTCENTER
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(m.GLDEBITACCT) - length(replace(m.GLDEBITACCT,'-','')) < 2 THEN NULL
		   ELSE SUBSTR(m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT, LOCATE('-', m.GLDEBITACCT)+1)+1)
	  END AS SAP_GL_CODE
	, pl.ORDERQTY
	, pl.GLDEBITACCT AS PL_GLDEBITACCT
	, CASE WHEN pl.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(pl.GLDEBITACCT) - length(replace(pl.GLDEBITACCT,'-','')) >= 2 THEN
				SUBSTR(pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1, LOCATE('-', pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1)-LOCATE('-', pl.GLDEBITACCT)-1)
		   ELSE SUBSTR(pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1)
	  END AS PL_COSTCENTER
	, CASE WHEN m.GLDEBITACCT IS NULL THEN NULL
	       WHEN length(pl.GLDEBITACCT) - length(replace(pl.GLDEBITACCT,'-','')) < 2 THEN NULL
		   ELSE SUBSTR(pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT, LOCATE('-', pl.GLDEBITACCT)+1)+1)
	  END AS PL_SAP_GL_CODE
	FROM maximo.SERVRECTRANS m
	JOIN maximo.POLINE pl ON pl.PONUM=m.PONUM AND pl.POLINENUM=m.POLINENUM AND pl.REVISIONNUM=m.POREVISIONNUM
) m 
JOIN maximo.PO po ON po.PONUM=m.PONUM AND po.REVISIONNUM=m.POREVISIONNUM
JOIN maximo.COMPANIES c ON c.COMPANY=po.VENDOR 
JOIN maximo.ITEM i ON i.ITEMNUM=m.ITEMNUM
--JOIN maximo.POLINE pl ON pl.PONUM=m.PONUM AND pl.POLINENUM=m.POLINENUM AND pl.REVISIONNUM=m.POREVISIONNUM
JOIN maximo.CHARTOFACCOUNTS coa ON coa.GLACCOUNT=m.GLDEBITACCT
-- LEFT JOIN maximo.STE_CSWNRECEIPT_PER_CC pc ON pc.MATRECTRANSID=m.MATRECTRANSID
-- total invoiced
LEFT JOIN (
	SELECT l.PONUM, l.POLINENUM, l.POREVISIONNUM, SUM(INVOICEQTY) AS INVOICEQTY
	FROM maximo.INVOICELINE l
	GROUP BY l.PONUM, l.POLINENUM, l.POREVISIONNUM
) l ON l.PONUM=m.PONUM AND l.POLINENUM=m.POLINENUM AND l.POREVISIONNUM=m.POREVISIONNUM
-- total received and accepted
LEFT JOIN (
	SELECT m.PONUM, m.POLINENUM, m.POREVISIONNUM, SUM(m.QUANTITY) AS ACCEPTEDQTY
	FROM maximo.SERVRECTRANS m
	GROUP BY m.PONUM, m.POLINENUM, m.POREVISIONNUM
) t ON t.PONUM=m.PONUM AND t.POLINENUM=m.POLINENUM AND t.POREVISIONNUM=m.POREVISIONNUM
-- Ideally we created records here for migrated data. But at the moment, none is created
LEFT JOIN maximo.INVOICEMATCH im ON im.SERVRECTRANSID=m.SERVRECTRANSID
WHERE 1=1
	AND m.ISSUETYPE IN ('RECEIPT')
	AND po.STATUS IN ('APPR', 'CLOSE')
	-- Accrual: Receipt which has not been invoiced
	--AND COALESCE(l.INVOICEQTY,0) < pl.ORDERQTY
	--AND COALESCE(l.INVOICEQTY,0) < COALESCE(t.ACCEPTEDQTY,0)
	AND im.INVOICEMATCHID IS NULL
	-- Service Accrual: no partial invoice in coswin)
	AND (m.STE_MIGRATIONID IS NULL OR COALESCE(l.INVOICEQTY,0)=0)
	-- Accrual: valid qty
	AND (
		-- before migration, use ACP_QTY
		(m.TRANSDATE<='2025-03-30' AND COALESCE(m.STE_CSWNACPQTY, m.QUANTITY) > 0)
		-- after migration, use QUANTITY
		OR (m.TRANSDATE>'2025-03-30' AND m.QUANTITY>0)
	)
	--AND m.INSPECTEDQTY <> m.REJECTQTY
	-- Valid SAPGL
	--AND ( coa.GLCOMP03 IS NOT NULL ) 
	--AND ( coa.GLCOMP03 BETWEEN '100000' AND '299999' ) 
	--AND ( coa.GLCOMP03 <> '113601' ) 
	-- Valid costcenter: not necessary since now costcenter is part of GLDEBITACCT
	--AND ( coa.GLCOMP02 IS NOT NULL ) 
	-- LEGACY FROM COSWIN: receiptval > 0
	AND m.LINECOST>0
	-- LEGACY FROM COSWIN: receiptstatus != fully invoiced
	AND ( CHR(COALESCE(m.STE_CSWNRCTSTATUS,50)) <> '3' )	-- 51
	-- LEGACY FROM COSWIN
	AND ( m.PONUM <> 'EE10005692' ) 
	AND ( m.PONUM <> 'EE10005693' )  
	AND ( coalesce(m.STE_CSWNRCTQTY,1) <> coalesce(m.STE_CSWNRTNTOSUPL,0) )  
	AND m.STATUS NOT IN ('WINSP', 'WASSET')
;

--#SET TERMINATOR /

-- ASSET-MONTHLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_ASSET_OPSHOURS_MONTHLY(
	IN P_STARTMONTH VARCHAR(10), IN P_ENDMONTH VARCHAR(10),
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50),
	IN P_ASSETNUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_ASSET_OPSHOURS_MONTHLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.11';

   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   WITH KPI_ASSET AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
	       SELECT
	           	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	           	-- A.LOCATION, B.TYPE, B.STATUS, A.STATUS, A.REPORTDATE, A.ACTFINISH,
				-- C.FIRST_DAY_WEEK, C.LAST_DAY_WEEK, C.WEEK_YEAR,
				C.FIRST_DAY_MONTH, C.LAST_DAY_MONTH, C.MONTH_YEAR,
	           	A.ASSETNUM, A.INSTALLDATE,
				C.DATE_VALUE, 
	           	COALESCE(D.STE_OPHOURS, 0) AS STE_OPHOURS,
				COALESCE(F.STE_OPS_BI, 0) AS STE_OPS_BI,
				COALESCE(F.STE_OPS_MSS, 0) AS STE_OPS_MSS, 
				COALESCE(F.STE_OPS_WSS, 0) AS STE_OPS_WSS,
	           	D.STE_STARTTIME, D.STE_ENDTIME,
				D.STE_STARTTIME AS ACT_STARTTIME, D.STE_ENDTIME AS ACT_ENDTIME,
	           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
		       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
		           	-- DEFAULT
		           	ELSE E.STE_STARTTIME
		       	END AS ACT_ADD_STARTTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
		           	-- DEFAULT
		           	ELSE E.STE_ENDTIME
		       	END AS ACT_ADD_ENDTIME,
		       	-- CHECK AGAINST DUPLICATE IN STE_OPS_HOURS
				ROW_NUMBER() OVER (PARTITION BY A.ASSETNUM, C.DATE_VALUE ORDER BY D.STE_CREATEDATE DESC) AS RN
			FROM 	
			(
		  		SELECT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.ASSETNUM, A.INSTALLDATE, B.LOCATION
		  		FROM MAXIMO.ASSET A
				JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.LOCATION
				WHERE 1=1
					AND A.STE_OPS=1 
					AND A.STATUS IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCASSETSTATUS' AND MAXVALUE IN ('OPERATING')
					)	 
					AND B.STATUS IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCSTAT' AND MAXVALUE IN ('OPERATING')
					)
					AND B.TYPE IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCTYPE' AND MAXVALUE IN ('OPERATING')
					)
					AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
					AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
					AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
					AND (P_ASSETNUM IS NULL OR A.ASSETNUM=P_ASSETNUM)
					-- FILTER OUT INVALID DATA
					AND A.STE_LINE IS NOT NULL AND A.STE_SYSTEM IS NOT NULL AND A.STE_SUBSYSTEM IS NOT NULL
			) A
			JOIN MAXIMO.STE_DATE_LOOKUP C 
				ON 1=1
			        -- SHOW DATA UNTIL END OF MONTH (DONT FILTER BASED ON CURRENT TIMESTAMP)
			        -- AND C.DATE_VALUE<=CURRENT_TIMESTAMP
			LEFT JOIN MAXIMO.STE_OPS_HOURS D 
				-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
				ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
			    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
			    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_ADD_HOURS E 
			    ON C.DATE_VALUE = E.STE_ADD_DATE
	           		AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_OPS F 
				ON F.STE_LINE=A.STE_LINE AND F.STE_SYSTEM=A.STE_SYSTEM AND F.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			WHERE 1=1 
				AND C.MONTH_YEAR<=P_ENDMONTH AND C.MONTH_YEAR>=P_STARTMONTH
				-- AND A.ASSETNUM='1141'
				-- AND C.MONTH_YEAR<='2024/12' AND C.MONTH_YEAR>='2023/01'
				-- AND C.MONTH_YEAR='2024/08'
	   ) AS A
	   WHERE A.RN=1
   ),
   KPI_ASSET_OPSHOURS AS (
	   SELECT
	       A.MONTH_YEAR,
	       A.STE_LINE,
	       A.STE_SYSTEM,
	       A.STE_SUBSYSTEM,
	       COUNT(DISTINCT A.ASSETNUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_MONTH) AS FIRST_DAY_MONTH,
	       MAX(A.LAST_DAY_MONTH) AS LAST_DAY_MONTH,
		   MAX(A.STE_OPS_BI) AS STE_OPS_BI,
		   MAX(A.STE_OPS_MSS) AS STE_OPS_MSS, 
		   MAX(A.STE_OPS_WSS) AS STE_OPS_WSS,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_ASSET A
	   GROUP BY A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  )
  SELECT 
  	V_VERSION AS VERSION,
	A.MONTH_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	COALESCE(C.EQPTCOUNT, 0) AS EQPTCOUNT,
	A.FIRST_DAY_MONTH,
	A.LAST_DAY_MONTH,
	DAY(A.LAST_DAY_MONTH) AS NUM_OF_DAYS,
	COALESCE(C.STE_OPS_HOURS, 0) AS STE_OPS_HOURS,
	COALESCE(C.STE_ADD_HOURS, 0) AS STE_ADD_HOURS,
	C.STE_OPS_BI, C.STE_OPS_MSS, C.STE_OPS_WSS,
	(COALESCE(C.STE_OPS_HOURS, 0)/COALESCE(C.EQPTCOUNT, 1)/DAY(A.LAST_DAY_MONTH)) AS DAILY_OPS_HOURS,
	-- (COALESCE(C.STE_OPS_HOURS, 0)/COALESCE(C.EQPTCOUNT, 1)) AS MONTHLY_OPS_HOURS,
	(COALESCE(C.STE_ADD_HOURS, 0)/COALESCE(C.EQPTCOUNT, 1)) AS MONTHLY_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	D.ASSETNUM,
   	D.DATE_VALUE, D.STE_OPHOURS, D.STE_STARTTIME, D.STE_ENDTIME, D.ACT_STARTTIME, D.ACT_ENDTIME,
	D.ACT_OPHOURS,
   	D.STE_ADD_HOUR, D.STE_ADD_STARTTIME, D.STE_ADD_ENDTIME, D.ACT_ADD_STARTTIME, D.ACT_ADD_ENDTIME,
	D.ACT_ADD_HOUR
  FROM (
  	-- FOR COMPLETENESS: LIST OF ALL MONTHS
  	SELECT DISTINCT A.MONTH_YEAR, A.FIRST_DAY_MONTH, A.LAST_DAY_MONTH
	FROM MAXIMO.STE_DATE_LOOKUP A 
	WHERE 
		A.MONTH_YEAR<=P_ENDMONTH AND A.MONTH_YEAR>=P_STARTMONTH
		-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		AND A.DATE_VALUE<=CURRENT_TIMESTAMP
  ) A
  JOIN (
  	-- FOR COMPLETENESS: LIST OF ALL LINES/SYSTEMS/SUBSYSTEMS
  	SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	FROM KPI_ASSET_OPSHOURS A
  ) B ON 1=1
  LEFT JOIN KPI_ASSET_OPSHOURS C 
  	ON C.MONTH_YEAR=A.MONTH_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN KPI_ASSET D ON P_SHOW_DETAIL=1
  	AND D.MONTH_YEAR=A.MONTH_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.MONTH_YEAR, D.ASSETNUM, D.DATE_VALUE;
   	
  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  -- default endmonth to current month
  IF (UPPER(P_ENDMONTH)='NULL' OR P_ENDMONTH='') THEN 
 	SET P_ENDMONTH=CONCAT(YEAR(CURRENT_TIMESTAMP),CONCAT('/',LPAD(MONTH(CURRENT_TIMESTAMP),2,'0'))); 
  END IF;

  -- FOR TROUBLESHOOTING	
  IF (UPPER(P_ASSETNUM)='NULL' OR P_ASSETNUM='') THEN SET P_ASSETNUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;
 
  OPEN C1;

END;
/

-- ASSET-WEEKLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_ASSET_OPSHOURS_WEEKLY(
	IN P_STARTDATE DATE, IN P_ENDDATE DATE,
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50),
	IN P_ASSETNUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_ASSET_OPSHOURS_WEEKLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.3
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.12';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
  	WITH KPI_ASSET AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
			SELECT 
				A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
				-- A.LOCATION, B.TYPE, B.STATUS, A.STATUS, A.REPORTDATE, A.ACTFINISH,
				C.FIRST_DAY_WEEK, C.LAST_DAY_WEEK, C.WEEK_YEAR,
				A.ASSETNUM, A.INSTALLDATE, 
				C.DATE_VALUE, 
	           	COALESCE(D.STE_OPHOURS, 0) AS STE_OPHOURS,
				COALESCE(F.STE_OPS_BI, 0) AS STE_OPS_BI,
				COALESCE(F.STE_OPS_MSS, 0) AS STE_OPS_MSS, 
				COALESCE(F.STE_OPS_WSS, 0) AS STE_OPS_WSS,
	           	D.STE_STARTTIME, D.STE_ENDTIME,
				D.STE_STARTTIME AS ACT_STARTTIME, D.STE_ENDTIME AS ACT_ENDTIME,
	           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
		       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
		           	-- DEFAULT
		           	ELSE E.STE_STARTTIME
		       	END AS ACT_ADD_STARTTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
		           	-- DEFAULT
		           	ELSE E.STE_ENDTIME
		       	END AS ACT_ADD_ENDTIME,
		       	-- CHECK AGAINST DUPLICATE IN STE_OPS_HOURS
				ROW_NUMBER() OVER (PARTITION BY A.ASSETNUM, C.DATE_VALUE ORDER BY D.STE_CREATEDATE DESC) AS RN
			FROM 
			(
		  		SELECT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.ASSETNUM, A.INSTALLDATE, B.LOCATION
		  		FROM MAXIMO.ASSET A
				JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.LOCATION
				WHERE 1=1
					AND A.STE_OPS=1 
					AND A.STATUS IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCASSETSTATUS' AND MAXVALUE IN ('OPERATING')
					)	 
					AND B.STATUS IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCSTAT' AND MAXVALUE IN ('OPERATING')
					)
					AND B.TYPE IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCTYPE' AND MAXVALUE IN ('OPERATING')
					)
					AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
					AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
					AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
					AND (P_ASSETNUM IS NULL OR A.ASSETNUM=P_ASSETNUM)
					-- FILTER OUT INVALID DATA
					AND A.STE_LINE IS NOT NULL AND A.STE_SYSTEM IS NOT NULL AND A.STE_SUBSYSTEM IS NOT NULL
			) A
			JOIN MAXIMO.STE_DATE_LOOKUP C 
				ON 1=1
			        -- SHOW DATA UNTIL END OF WEEK (DONT FILTER BASED ON CURRENT TIMESTAMP)
			        -- AND C.DATE_VALUE<=CURRENT_TIMESTAMP
			LEFT JOIN MAXIMO.STE_OPS_HOURS D 
				-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
				ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
			    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
			    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_ADD_HOURS E 
			    ON C.DATE_VALUE=E.STE_ADD_DATE
			    	AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_OPS F 
				ON F.STE_LINE=A.STE_LINE AND F.STE_SYSTEM=A.STE_SYSTEM AND F.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			WHERE 1=1
				AND C.FIRST_DAY_WEEK<=P_ENDDATE AND C.LAST_DAY_WEEK>=P_STARTDATE
				-- AND C.FIRST_DAY_WEEK<='2024-08-31' AND C.LAST_DAY_WEEK>='2024-07-01'
				-- AND A.ASSETNUM='1141'
				-- AND C.MONTH_YEAR='2024/08'
	   ) AS A
	   WHERE A.RN=1
	),
   	KPI_ASSET_OPSHOURS AS (
	   SELECT
	       A.WEEK_YEAR,
	       A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	       COUNT(DISTINCT A.ASSETNUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_WEEK) AS FIRST_DAY_WEEK,
	       MAX(A.LAST_DAY_WEEK) AS LAST_DAY_WEEK,
		   MAX(A.STE_OPS_BI) AS STE_OPS_BI,
		   MAX(A.STE_OPS_MSS) AS STE_OPS_MSS, 
		   MAX(A.STE_OPS_WSS) AS STE_OPS_WSS,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_ASSET A
	   GROUP BY A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	)
  SELECT 
  	V_VERSION AS VERSION,
	A.WEEK_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	COALESCE(C.EQPTCOUNT, 0) AS EQPTCOUNT,
	A.FIRST_DAY_WEEK,
	A.LAST_DAY_WEEK,
	7 AS NUM_OF_DAYS,
	COALESCE(C.STE_OPS_HOURS, 0) AS STE_OPS_HOURS,
	COALESCE(C.STE_ADD_HOURS, 0) AS STE_ADD_HOURS,
	C.STE_OPS_BI, C.STE_OPS_MSS, C.STE_OPS_WSS,
	(COALESCE(C.STE_OPS_HOURS, 0)/COALESCE(C.EQPTCOUNT, 1)/7) AS DAILY_OPS_HOURS,
	-- (COALESCE(C.STE_OPS_HOURS, 0)/COALESCE(C.EQPTCOUNT, 1)) AS WEEKLY_OPS_HOURS,
	(COALESCE(C.STE_ADD_HOURS, 0)/COALESCE(C.EQPTCOUNT, 1)) AS WEEKLY_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	D.ASSETNUM,
   	D.DATE_VALUE, D.STE_OPHOURS, D.STE_STARTTIME, D.STE_ENDTIME, D.ACT_STARTTIME, D.ACT_ENDTIME,
	D.ACT_OPHOURS,
   	D.STE_ADD_HOUR, D.STE_ADD_STARTTIME, D.STE_ADD_ENDTIME, D.ACT_ADD_STARTTIME, D.ACT_ADD_ENDTIME,
	D.ACT_ADD_HOUR
  FROM (
  	-- MASTER LIST OF WEEKS
  	SELECT DISTINCT A.WEEK_YEAR, A.FIRST_DAY_WEEK, A.LAST_DAY_WEEK
	FROM MAXIMO.STE_DATE_LOOKUP A 
	WHERE 
		A.FIRST_DAY_WEEK<=P_ENDDATE AND A.LAST_DAY_WEEK>=P_STARTDATE
		-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		AND A.DATE_VALUE<=CURRENT_TIMESTAMP
  ) A
  JOIN (
  	-- MASTER LIST OF LINE/SYSTEM/SUBSYSTEM
  	SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	FROM KPI_ASSET_OPSHOURS A
  ) B ON 1=1
  LEFT JOIN KPI_ASSET_OPSHOURS C ON
  	C.WEEK_YEAR=A.WEEK_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN KPI_ASSET D ON P_SHOW_DETAIL=1
  	AND D.WEEK_YEAR=A.WEEK_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.WEEK_YEAR, D.ASSETNUM, D.DATE_VALUE; 

  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  -- default enddate to current_date
  -- important: by default, p_enddate should be on sunday. but if default to current_date, it could be any day
  IF (P_ENDDATE IS NULL) THEN SET P_ENDDATE=CURRENT_TIMESTAMP; END IF;
 
  -- FOR TROUBLESHOOTING	
  IF (UPPER(P_ASSETNUM)='NULL' OR P_ASSETNUM='') THEN SET P_ASSETNUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;
 
  OPEN C1;

END;
/

-- KPI-DATA-MONTHLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_KPI_DATA_OPSHOURS_MONTHLY(
	IN P_STARTMONTH VARCHAR(10), IN P_ENDMONTH VARCHAR(10),
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50)
)
LANGUAGE SQL
SPECIFIC PRC_RPT_KPI_DATA_OPSHOURS_MONTHLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.4';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
	WITH ASSETS_OPSHOURS AS (
	  SELECT 
	  	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.STE_MONTHYEAR, 
	  	SUM(A.STE_OPSEQPTCOUNT) AS STE_OPSEQPTCOUNT, 
	  	SUM(A.STE_OPHOURS) AS STE_OPS_HOURS, 
	  	SUM(A.STE_ADD_HOURS) AS STE_ADD_HOURS, 
	  	MAX(A.STE_OPS_MSS) AS STE_OPS_MSS, 
	  	MAX(A.STE_OPS_BI) AS STE_OPS_BI 
	  FROM MAXIMO.STE_KPI_DATA_MONTHLY A 
	  WHERE 
	  	A.STE_MONTHYEAR <= P_ENDMONTH and A.STE_MONTHYEAR >= P_STARTMONTH  
		AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
		AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
		AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
	  GROUP BY A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.STE_MONTHYEAR 
	) 
	SELECT 
  		V_VERSION AS VERSION,
		B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.MONTH_YEAR AS STE_MONTHYEAR, 
		CONCAT(B.STE_SYSTEM, CONCAT('/', B.STE_SUBSYSTEM)) AS SYSTEM_SUBSYSTEM, 
		SUBSTR(A.MONTH_YEAR, 1, 4) AS STE_YEAR, SUBSTR(A.MONTH_YEAR, 6, 2) AS STE_MONTH, 
	  	DATE_PART('DAY', A.LAST_DAY_MONTH) AS NUM_OF_DAYS, 
	  	COALESCE(C.STE_OPSEQPTCOUNT,0) AS STE_OPSEQPTCOUNT, 
	  	COALESCE(C.STE_OPS_HOURS,0) AS STE_OPS_HOURS, 
	  	COALESCE(C.STE_ADD_HOURS,0) AS STE_ADD_HOURS, 
	  	COALESCE(C.STE_OPS_MSS,0) AS STE_OPS_MSS, 
	  	COALESCE(C.STE_OPS_BI,0) AS STE_OPS_BI, 
	  	COALESCE(D.STE_OPHOURS,0) AS OPHOURS_PER_DAY 
	FROM 
	( 
		SELECT DISTINCT A.MONTH_YEAR, A.FIRST_DAY_MONTH, A.LAST_DAY_MONTH 
		FROM MAXIMO.STE_DATE_LOOKUP A 
		WHERE 
			A.MONTH_YEAR <= P_ENDMONTH and A.MONTH_YEAR >= P_STARTMONTH  
				AND A.DATE_VALUE<=CURRENT_TIMESTAMP
	) A 
	JOIN 
	( 
		SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM 
		FROM ASSETS_OPSHOURS A 
	) B ON 1=1 
	LEFT JOIN ASSETS_OPSHOURS C 
		ON C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM AND C.STE_MONTHYEAR=A.MONTH_YEAR 
	LEFT JOIN (
		SELECT D.STE_LINE, D.STE_SYSTEM, D.STE_SUBSYSTEM, B.MONTH_YEAR
			, D.STE_OPHOURS
	       	-- CHECK AGAINST DUPLICATE IN STE_OPS_HOURS
			, ROW_NUMBER() OVER (PARTITION BY D.STE_LINE, D.STE_SYSTEM, D.STE_SUBSYSTEM, B.MONTH_YEAR ORDER BY D.STE_CREATEDATE DESC) AS RN
		FROM (
		  	SELECT DISTINCT A.MONTH_YEAR, A.FIRST_DAY_MONTH
			FROM MAXIMO.STE_DATE_LOOKUP A 
			WHERE 
				A.MONTH_YEAR<=P_ENDMONTH AND A.MONTH_YEAR>=P_STARTMONTH
				AND A.DATE_VALUE<=CURRENT_TIMESTAMP
		) B
		JOIN MAXIMO.STE_OPS_HOURS D 
	    	-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
	    	ON B.MONTH_YEAR>=D.STE_STARTMONTH AND B.MONTH_YEAR<=D.STE_ENDMONTH 
				AND (P_LINE IS NULL OR D.STE_LINE=P_LINE)
				AND (P_SYSTEM IS NULL OR D.STE_SYSTEM=P_SYSTEM)
				AND (P_SUBSYSTEM IS NULL OR D.STE_SUBSYSTEM=P_SUBSYSTEM)
	) D ON D.RN=1 
		AND D.MONTH_YEAR=A.MONTH_YEAR AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
	-- LEFT JOIN MAXIMO.STE_OPS_HOURS D 
	--    ON D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM 
	-- 		AND A.MONTH_YEAR>=D.STE_STARTMONTH 
	-- 		AND A.MONTH_YEAR<=D.STE_ENDMONTH 
	ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.MONTH_YEAR 
	;

  	IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  	IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  	IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  	OPEN C1;

END;
/

-- KPI-DATA-WEEKLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_KPI_DATA_OPSHOURS_WEEKLY(
	IN P_STARTDATE DATE, IN P_ENDDATE DATE,
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50)
)
LANGUAGE SQL
SPECIFIC PRC_RPT_KPI_DATA_OPSHOURS_WEEKLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.4';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
	WITH ASSETS_OPSHOURS AS (
	  SELECT 
	  	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.STE_WEEKSTARTDATE, A.STE_WEEKENDDATE, 
	  	SUM(A.STE_OPSEQPTCOUNT) AS STE_OPSEQPTCOUNT, 
	  	SUM(A.STE_OPHOURS) AS STE_OPS_HOURS, 
	  	SUM(A.STE_ADD_HOUR) AS STE_ADD_HOURS, 
	  	MAX(A.STE_OPS_WSS) AS STE_OPS_WSS, 
	  	MAX(A.STE_OPS_BI) AS STE_OPS_BI
	  FROM MAXIMO.STE_KPI_DATA_WEEKLY A 
	  WHERE 
	  	A.STE_WEEKSTARTDATE <= P_ENDDATE and A.STE_WEEKENDDATE >= P_STARTDATE  
	  	-- A.STE_WEEKSTARTDATE <= '2024-12-31' and A.STE_WEEKENDDATE >= '2023-07-01'
			AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
			AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
			AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
	  GROUP BY A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.STE_WEEKSTARTDATE, A.STE_WEEKENDDATE 
	) 
	SELECT 
  		V_VERSION AS VERSION,
		B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, 
		A.WEEK_YEAR AS STE_WEEKYEAR, A.FIRST_DAY_WEEK AS STE_WEEKSTARTDATE, A.LAST_DAY_WEEK AS STE_WEEKENDDATE,
		CONCAT(B.STE_SYSTEM, CONCAT('/', B.STE_SUBSYSTEM)) AS SYSTEM_SUBSYSTEM, 
		7 AS NUM_OF_DAYS,
	  	COALESCE(C.STE_OPSEQPTCOUNT,0) AS STE_OPSEQPTCOUNT, 
	  	COALESCE(C.STE_OPS_HOURS,0) AS STE_OPS_HOURS, 
	  	COALESCE(C.STE_ADD_HOURS,0) AS STE_ADD_HOURS, 
	  	COALESCE(C.STE_OPS_WSS,0) AS STE_OPS_WSS, 
	  	COALESCE(C.STE_OPS_BI,0) AS STE_OPS_BI, 
	  	COALESCE(D.STE_OPHOURS,0) AS OPHOURS_PER_DAY 
	FROM 
	( 
		SELECT DISTINCT A.WEEK_YEAR, A.FIRST_DAY_WEEK, A.LAST_DAY_WEEK 
		FROM MAXIMO.STE_DATE_LOOKUP A 
		WHERE 
			A.FIRST_DAY_WEEK <= P_ENDDATE and A.LAST_DAY_WEEK >= P_STARTDATE   
			-- A.FIRST_DAY_WEEK <= '2024-12-31' and A.LAST_DAY_WEEK >= '2023-07-01'
	) A 
	JOIN 
	( 
		SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM 
		FROM ASSETS_OPSHOURS A 
	) B ON 1=1 
	LEFT JOIN ASSETS_OPSHOURS C 
		ON C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM 
			AND C.STE_WEEKSTARTDATE=A.FIRST_DAY_WEEK 
	LEFT JOIN (
		SELECT D.STE_LINE, D.STE_SYSTEM, D.STE_SUBSYSTEM, B.WEEK_YEAR
			, D.STE_OPHOURS
	       	-- CHECK AGAINST DUPLICATE IN STE_OPS_HOURS
			, ROW_NUMBER() OVER (PARTITION BY D.STE_LINE, D.STE_SYSTEM, D.STE_SUBSYSTEM, B.WEEK_YEAR ORDER BY D.STE_CREATEDATE DESC) AS RN
		FROM (
		  	SELECT DISTINCT A.WEEK_YEAR, A.FIRST_DAY_WEEK, A.MONTH_YEAR
			FROM MAXIMO.STE_DATE_LOOKUP A 
			WHERE 
				A.FIRST_DAY_WEEK<=P_ENDDATE AND A.LAST_DAY_WEEK>=P_STARTDATE
				AND A.DATE_VALUE<=CURRENT_TIMESTAMP
		) B
		JOIN MAXIMO.STE_OPS_HOURS D 
			-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
	    	ON B.MONTH_YEAR>=D.STE_STARTMONTH AND B.MONTH_YEAR<=D.STE_ENDMONTH
		    -- ON B.FIRST_DAY_WEEK<=D.STE_VALIDTO AND B.FIRST_DAY_WEEK>=D.STE_VALIDFRM
				AND (P_LINE IS NULL OR D.STE_LINE=P_LINE)
				AND (P_SYSTEM IS NULL OR D.STE_SYSTEM=P_SYSTEM)
				AND (P_SUBSYSTEM IS NULL OR D.STE_SUBSYSTEM=P_SUBSYSTEM)
	) D ON D.RN=1
		AND D.WEEK_YEAR=A.WEEK_YEAR AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
	-- LEFT JOIN MAXIMO.STE_OPS_HOURS D 
	--    ON D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM 
	-- 		AND A.FIRST_DAY_WEEK<=D.STE_VALIDTO AND A.FIRST_DAY_WEEK>=D.STE_VALIDFRM 
	ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.WEEK_YEAR 
	;

  	IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  	IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  	IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  	OPEN C1;

END;
/

-- KPI-DETAIL-WEEKLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_KPI_DETAIL_WO_OPSHOURS_WEEKLY(
	IN P_STARTDATE DATE, IN P_ENDDATE DATE,
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50), 
	IN P_STATION VARCHAR(50) 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_KPI_DETAIL_WO_OPSHOURS_WEEKLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.8';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   	WITH KPI_WORKORDER AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
	    	SELECT
	           	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	           	A.STE_KPI_WO_DATA_WEEKLYID, C.FIRST_DAY_WEEK, C.LAST_DAY_WEEK, C.WEEK_YEAR,
	           	A.WONUM, A.REPORTDATE, A.ACTFINISH,
	           	C.DATE_VALUE,
				COALESCE(D.STE_OPHOURS,0) AS STE_OPHOURS,
	           	D.STE_STARTTIME, D.STE_ENDTIME,
				CASE
					-- FIRST DAY
					WHEN C.DATE_VALUE=CAST(A.REPORTDATE AS DATE) THEN 
						CASE 
							-- D.STE_STARTTIME>D.STE_ENDTIME
							WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
							-- ELSE 
							WHEN CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN CAST(A.REPORTDATE AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME
							ELSE CAST(A.REPORTDATE AS TIME) 
						END
					ELSE D.STE_STARTTIME
				END AS ACT_STARTTIME,
				CASE
					-- LAST DAY
					WHEN C.DATE_VALUE=CAST(A.ACTFINISH AS DATE) THEN 
						CASE 
							-- D.STE_STARTTIME>D.STE_ENDTIME
							WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
							-- ELSE 
							WHEN CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME
							WHEN CAST(A.ACTFINISH AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME 
							ELSE 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END 
						END
					ELSE D.STE_ENDTIME
				END AS ACT_ENDTIME,
	           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
		       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
		           	-- FIRST DAY
		           	WHEN C.DATE_VALUE = CAST(A.REPORTDATE AS DATE) THEN 
						CASE
							-- E.STE_STARTTIME>E.STE_ENDTIME
							WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
							WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
							-- ELSE 
		               		WHEN CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
		               		WHEN CAST(A.REPORTDATE AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
		               		ELSE CAST(A.REPORTDATE AS TIME)
		           		END
		           	-- DEFAULT
		           	ELSE E.STE_STARTTIME
		       	END AS ACT_ADD_STARTTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
		           	-- LAST DAY
		           	WHEN C.DATE_VALUE = CAST(A.ACTFINISH AS DATE) THEN 
						CASE
							-- E.STE_STARTTIME>E.STE_ENDTIME
							WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
							WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
							-- ELSE 
		               		WHEN CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
		               		WHEN CAST(A.ACTFINISH AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
		               		ELSE 
		               			CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
		           	END
		           	-- DEFAULT
		           	ELSE E.STE_ENDTIME
		       	END AS ACT_ADD_ENDTIME,
		       	-- CHECK AGAINST DUPLICATE IN STE_KPI_WO_DATA_WEEKLY AND STE_OPS_HOURS
				ROW_NUMBER() OVER (PARTITION BY A.WONUM, C.DATE_VALUE ORDER BY A.STE_KPI_WO_DATA_WEEKLYID DESC, D.STE_CREATEDATE DESC) AS RN
			FROM MAXIMO.STE_KPI_WO_DATA_WEEKLY A
		    JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.STE_LOCNUM
			JOIN MAXIMO.STE_DATE_LOOKUP C ON C.FIRST_DAY_WEEK=A.STE_WEEKSTARTDATE
				-- ONLY WHEN WO IS VALID
				AND C.DATE_VALUE>=CAST (A.REPORTDATE AS DATE) AND C.DATE_VALUE<=CAST (A.ACTFINISH AS DATE)
		        -- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		        AND C.DATE_VALUE<=CURRENT_TIMESTAMP
			-- validate against current status of workorder -> filter bad data generated by crontask?
			JOIN MAXIMO.WORKORDER Z ON Z.WONUM=A.WONUM AND Z.STE_LINE=A.STE_LINE AND Z.STE_SYSTEM=A.STE_SYSTEM AND Z.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_OPS_HOURS D 
				-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
				ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
			    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
			    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
	       	LEFT JOIN MAXIMO.STE_ADD_HOURS E 
			    ON C.DATE_VALUE=E.STE_ADD_DATE
	           		AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			WHERE 1=1
				AND A.STE_OPSEQPTFAILURE = 1
	        	AND A.STATUS NOT IN ('CAN', 'WAPPR', 'CLOSEWITHERROR')
				AND C.FIRST_DAY_WEEK<=P_ENDDATE AND C.LAST_DAY_WEEK>=P_STARTDATE
				AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
				AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
				AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
				AND (P_STATION IS NULL OR B.STE_STATION=P_STATION)
				-- AND C.FIRST_DAY_WEEK<='2024-08-31' AND C.LAST_DAY_WEEK>='2024-07-01'
	           	-- AND (A.STE_LINE = 'NEL')
	           	-- AND (A.STE_SYSTEM = 'AFC')
	           	-- AND (A.STE_SUBSYSTEM = 'GATE')
	           	-- AND A.WONUM='866646'
				-- AND C.MONTH_YEAR='2024/08'
	   ) AS A
	   WHERE A.RN=1
	),
   	KPI_WORKORDER_OPSHOURS AS (
	   SELECT
	       A.STE_KPI_WO_DATA_WEEKLYID, A.WEEK_YEAR,
	       COUNT(DISTINCT A.WONUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_WEEK) AS FIRST_DAY_WEEK,
	       MAX(A.LAST_DAY_WEEK) AS LAST_DAY_WEEK,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_WORKORDER A
	   GROUP BY A.STE_KPI_WO_DATA_WEEKLYID, A.WEEK_YEAR
	)
	SELECT 
  		V_VERSION AS VERSION,
		A.STE_KPI_WO_DATA_WEEKLYID, A.WEEK_YEAR, B.STE_WEEKSTARTDATE, B.STE_WEEKENDDATE, 
		A.STE_OPS_HOURS, A.STE_ADD_HOURS,
		B.WONUM, B.STE_WODESC, B.STATUS, B.REPORTDATE, B.ACTFINISH, B.STE_ASSETCODE, B.STE_ASSETDESC,
		B.STE_INACCESSIBLE_TIME, B.STE_INACCESSIBLE_REMARKS, B.STE_OPSEQPTFAILURE,
		B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
		B.STE_LOCCODE, B.STE_LOCDESC, B.STE_LOCNUM, 
		C.STE_STATION, C.STE_DEPOT,
		-- where to get station description?
		C.STE_STATION AS STATION_DESC
	FROM KPI_WORKORDER_OPSHOURS A
	JOIN MAXIMO.STE_KPI_WO_DATA_WEEKLY B ON B.STE_KPI_WO_DATA_WEEKLYID=A.STE_KPI_WO_DATA_WEEKLYID
	JOIN MAXIMO.LOCATIONS C ON C.LOCATION=B.STE_LOCNUM
	ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, C.STE_STATION, A.WEEK_YEAR, B.STE_LOCCODE, B.WONUM;
	
	IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
	IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
	IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;
	IF (UPPER(P_STATION)='NULL' OR P_STATION='') THEN SET P_STATION=NULL; END IF;
	
	OPEN C1;


END;
/

-- KPI-WO-MONTHLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_KPI_WO_OPSHOURS_MONTHLY(
	IN P_STARTMONTH VARCHAR(10), IN P_ENDMONTH VARCHAR(10),
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50),
	IN P_WONUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_KPI_WO_OPSHOURS_MONTHLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.9';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   WITH KPI_WORKORDER AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
			SELECT
	           	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	           	C.FIRST_DAY_MONTH, C.LAST_DAY_MONTH, C.MONTH_YEAR,
	           	A.WONUM, A.REPORTDATE, A.ACTFINISH,
	           	C.DATE_VALUE,
	           	COALESCE(D.STE_OPHOURS, 0) AS STE_OPHOURS,
	           	D.STE_STARTTIME, D.STE_ENDTIME,
				CASE
					-- FIRST DAY
					WHEN C.DATE_VALUE=CAST(A.REPORTDATE AS DATE) THEN 
						CASE 
							-- D.STE_STARTTIME>D.STE_ENDTIME
							WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
							-- ELSE 
							WHEN CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN CAST(A.REPORTDATE AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME
							ELSE CAST(A.REPORTDATE AS TIME) 
						END
					ELSE D.STE_STARTTIME
				END AS ACT_STARTTIME,
				CASE
					-- LAST DAY
					WHEN C.DATE_VALUE=CAST(A.ACTFINISH AS DATE) THEN 
						CASE 
							-- D.STE_STARTTIME>D.STE_ENDTIME
							WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
							-- ELSE 
							WHEN CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME
							WHEN CAST(A.ACTFINISH AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME 
							ELSE 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END 
						END
					ELSE D.STE_ENDTIME
				END AS ACT_ENDTIME,
	           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
		       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
		           	-- FIRST DAY
		           	WHEN C.DATE_VALUE = CAST(A.REPORTDATE AS DATE) THEN 
						CASE
							-- E.STE_STARTTIME>E.STE_ENDTIME
							WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
							WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
							-- ELSE 
		               		WHEN CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
		               		WHEN CAST(A.REPORTDATE AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
		               		ELSE CAST(A.REPORTDATE AS TIME)
		           		END
		           	-- DEFAULT
		           	ELSE E.STE_STARTTIME
		       	END AS ACT_ADD_STARTTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
		           	-- LAST DAY
		           	WHEN C.DATE_VALUE = CAST(A.ACTFINISH AS DATE) THEN 
						CASE
							-- E.STE_STARTTIME>E.STE_ENDTIME
							WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
							WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
							-- ELSE 
		               		WHEN CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
		               		WHEN CAST(A.ACTFINISH AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
		               		ELSE 
		               			CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
		           	END
		           	-- DEFAULT
		           	ELSE E.STE_ENDTIME
		       	END AS ACT_ADD_ENDTIME,
		       	-- CHECK AGAINST DUPLICATE IN STE_KPI_WO_DATA_MONTHLY AND STE_OPS_HOURS
				ROW_NUMBER() OVER (PARTITION BY A.WONUM, C.DATE_VALUE ORDER BY A.STE_KPI_WO_DATA_MONTHLYID DESC, D.STE_CREATEDATE DESC) AS RN
	        FROM MAXIMO.STE_KPI_WO_DATA_MONTHLY A
			JOIN MAXIMO.STE_DATE_LOOKUP C 
				ON C.MONTH_YEAR=A.STE_MONTHYEAR 
					-- ONLY WHEN WO IS VALID
			        AND C.DATE_VALUE>=CAST(A.REPORTDATE AS DATE) AND C.DATE_VALUE<=CAST(A.ACTFINISH AS DATE)
			        -- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
			        AND C.DATE_VALUE<=CURRENT_TIMESTAMP
			-- validate against current status of workorder -> filter bad data generated by crontask?
			JOIN MAXIMO.WORKORDER Z ON Z.WONUM=A.WONUM AND Z.STE_LINE=A.STE_LINE AND Z.STE_SYSTEM=A.STE_SYSTEM AND Z.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_OPS_HOURS D 
				-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
				ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
			    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
			    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
	       	LEFT JOIN MAXIMO.STE_ADD_HOURS E 
			    ON C.DATE_VALUE = E.STE_ADD_DATE
	           		AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			WHERE 1=1
	       	   	AND A.STE_OPSEQPTFAILURE = 1
	           	AND A.STATUS NOT IN ('CAN', 'WAPPR', 'CLOSEWITHERROR')
			   	AND C.MONTH_YEAR<=P_ENDMONTH AND C.MONTH_YEAR>=P_STARTMONTH
				AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
				AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
				AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
				AND (P_WONUM IS NULL OR A.WONUM=P_WONUM)
			   	-- AND C.MONTH_YEAR<='2024/07' AND C.MONTH_YEAR>='2024/06'
	           	-- AND (A.STE_LINE = 'NEL')
	           	-- AND (A.STE_SYSTEM = 'AFC')
	           	-- AND (A.STE_SUBSYSTEM = 'GATE')
	           	-- AND A.WONUM='866646'
	           	-- AND C.MONTH_YEAR='2024/08'
	       ORDER BY A.WONUM, C.DATE_VALUE
	   ) AS A
	   WHERE A.RN=1
   ),
   KPI_WORKORDER_OPSHOURS AS (
	   SELECT
	       A.MONTH_YEAR,
	       A.STE_LINE,
	       A.STE_SYSTEM,
	       A.STE_SUBSYSTEM,
	       COUNT(DISTINCT A.WONUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_MONTH) AS FIRST_DAY_MONTH,
	       MAX(A.LAST_DAY_MONTH) AS LAST_DAY_MONTH,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_WORKORDER A
	   GROUP BY A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  )
  SELECT 
  	V_VERSION AS VERSION,
	A.MONTH_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	COALESCE(C.EQPTCOUNT, 0) AS EQPTCOUNT,
	A.FIRST_DAY_MONTH,
	A.LAST_DAY_MONTH,
	COALESCE(C.STE_OPS_HOURS, 0) AS STE_OPS_HOURS,
	COALESCE(C.STE_ADD_HOURS, 0) AS STE_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	D.WONUM, D.REPORTDATE, D.ACTFINISH,
   	D.DATE_VALUE, D.STE_OPHOURS, D.STE_STARTTIME, D.STE_ENDTIME, D.ACT_STARTTIME, D.ACT_ENDTIME,
	D.ACT_OPHOURS,
   	D.STE_ADD_HOUR, D.STE_ADD_STARTTIME, D.STE_ADD_ENDTIME, D.ACT_ADD_STARTTIME, D.ACT_ADD_ENDTIME,
	D.ACT_ADD_HOUR
  FROM (
  	-- FOR COMPLETENESS: LIST OF ALL MONTHS
  	SELECT DISTINCT A.MONTH_YEAR, A.FIRST_DAY_MONTH, A.LAST_DAY_MONTH
	FROM MAXIMO.STE_DATE_LOOKUP A 
	WHERE 
		A.MONTH_YEAR<=P_ENDMONTH AND A.MONTH_YEAR>=P_STARTMONTH
		-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		AND A.DATE_VALUE<=CURRENT_TIMESTAMP
  ) A
  JOIN (
  	-- FOR COMPLETENESS: LIST OF ALL LINES/SYSTEMS/SUBSYSTEMS
  	SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	FROM KPI_WORKORDER_OPSHOURS A
  ) B ON 1=1
  LEFT JOIN KPI_WORKORDER_OPSHOURS C ON C.MONTH_YEAR=A.MONTH_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN KPI_WORKORDER D ON P_SHOW_DETAIL=1
  	AND D.MONTH_YEAR=A.MONTH_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.MONTH_YEAR, D.WONUM, D.DATE_VALUE;

  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;
 
  -- FOR TROUBLESHOOTING	
  IF (UPPER(P_WONUM)='NULL' OR P_WONUM='') THEN SET P_WONUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;

  OPEN C1;

END;
/

--KPI-WO-WEEKLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_KPI_WO_OPSHOURS_WEEKLY(
	IN P_STARTDATE DATE, IN P_ENDDATE DATE,
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50),
	IN P_WONUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_KPI_WO_OPSHOURS_WEEKLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.9';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   	WITH KPI_WORKORDER AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
	    	SELECT
	           	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	           	C.FIRST_DAY_WEEK, C.LAST_DAY_WEEK, C.WEEK_YEAR,
	           	A.WONUM, A.REPORTDATE, A.ACTFINISH,
	           	C.DATE_VALUE,
				COALESCE(D.STE_OPHOURS,0) AS STE_OPHOURS,
	           	D.STE_STARTTIME, D.STE_ENDTIME,
				CASE
					-- FIRST DAY
					WHEN C.DATE_VALUE=CAST(A.REPORTDATE AS DATE) THEN 
						CASE 
							-- D.STE_STARTTIME>D.STE_ENDTIME
							WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
							-- ELSE 
							WHEN CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN CAST(A.REPORTDATE AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME
							ELSE CAST(A.REPORTDATE AS TIME) 
						END
					ELSE D.STE_STARTTIME
				END AS ACT_STARTTIME,
				CASE
					-- LAST DAY
					WHEN C.DATE_VALUE=CAST(A.ACTFINISH AS DATE) THEN 
						CASE 
							-- D.STE_STARTTIME>D.STE_ENDTIME
							WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
							WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END
							-- ELSE 
							WHEN CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME
							WHEN CAST(A.ACTFINISH AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME 
							ELSE 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END 
						END
					ELSE D.STE_ENDTIME
				END AS ACT_ENDTIME,
	           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
		       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
		           	-- FIRST DAY
		           	WHEN C.DATE_VALUE = CAST(A.REPORTDATE AS DATE) THEN 
						CASE
							-- E.STE_STARTTIME>E.STE_ENDTIME
							WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
							WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
							-- ELSE 
		               		WHEN CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
		               		WHEN CAST(A.REPORTDATE AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
		               		ELSE CAST(A.REPORTDATE AS TIME)
		           		END
		           	-- DEFAULT
		           	ELSE E.STE_STARTTIME
		       	END AS ACT_ADD_STARTTIME,
		       	CASE
			       	-- NO ADD HOUR
		           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
		           	-- LAST DAY
		           	WHEN C.DATE_VALUE = CAST(A.ACTFINISH AS DATE) THEN 
						CASE
							-- E.STE_STARTTIME>E.STE_ENDTIME
							WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
							WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END 
							-- ELSE 
		               		WHEN CAST(A.ACTFINISH AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
		               		WHEN CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
							ELSE 
								CASE WHEN CAST(A.ACTFINISH AS TIME)='23:59:59' THEN '24:00:00' ELSE CAST(A.ACTFINISH AS TIME) END 
		           	END
		           	-- DEFAULT
		           	ELSE E.STE_ENDTIME
		       	END AS ACT_ADD_ENDTIME,
		       	-- CHECK AGAINST DUPLICATE IN STE_KPI_WO_DATA_WEEKLY AND STE_OPS_HOURS
				ROW_NUMBER() OVER (PARTITION BY A.WONUM, C.DATE_VALUE ORDER BY A.STE_KPI_WO_DATA_WEEKLYID DESC, D.STE_CREATEDATE DESC) AS RN
			FROM MAXIMO.STE_KPI_WO_DATA_WEEKLY A
			JOIN MAXIMO.STE_DATE_LOOKUP C ON C.FIRST_DAY_WEEK=A.STE_WEEKSTARTDATE
				-- ONLY WHEN WO IS VALID
				AND C.DATE_VALUE>=CAST (A.REPORTDATE AS DATE) AND C.DATE_VALUE<=CAST (A.ACTFINISH AS DATE)
		        -- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		        AND C.DATE_VALUE<=CURRENT_TIMESTAMP
			-- validate against current status of workorder -> filter bad data generated by crontask?
			JOIN MAXIMO.WORKORDER Z ON Z.WONUM=A.WONUM AND Z.STE_LINE=A.STE_LINE AND Z.STE_SYSTEM=A.STE_SYSTEM AND Z.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			LEFT JOIN MAXIMO.STE_OPS_HOURS D 
				-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
				ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
			    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
			    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
	       	LEFT JOIN MAXIMO.STE_ADD_HOURS E 
			    ON C.DATE_VALUE=E.STE_ADD_DATE
	           		AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
			WHERE 1=1
				AND A.STE_OPSEQPTFAILURE = 1
	        	AND A.STATUS NOT IN ('CAN', 'WAPPR', 'CLOSEWITHERROR')
				AND C.FIRST_DAY_WEEK<=P_ENDDATE AND C.LAST_DAY_WEEK>=P_STARTDATE
				AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
				AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
				AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
				AND (P_WONUM IS NULL OR A.WONUM=P_WONUM)
				-- AND C.FIRST_DAY_WEEK<='2024-08-31' AND C.LAST_DAY_WEEK>='2024-07-01'
	           	-- AND (A.STE_LINE = 'NEL')
	           	-- AND (A.STE_SYSTEM = 'AFC')
	           	-- AND (A.STE_SUBSYSTEM = 'GATE')
	           	-- AND A.WONUM='866646'
				-- AND C.MONTH_YEAR='2024/08'
	   ) AS A
	   WHERE A.RN=1
	),
   	KPI_WORKORDER_OPSHOURS AS (
	   SELECT
	       A.WEEK_YEAR,
	       A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	       COUNT(DISTINCT A.WONUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_WEEK) AS FIRST_DAY_WEEK,
	       MAX(A.LAST_DAY_WEEK) AS LAST_DAY_WEEK,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_WORKORDER A
	   GROUP BY A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  )
  SELECT 
  	V_VERSION AS VERSION,
	A.WEEK_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	COALESCE(C.EQPTCOUNT, 0) AS EQPTCOUNT,
	A.FIRST_DAY_WEEK,
	A.LAST_DAY_WEEK,
	COALESCE(C.STE_OPS_HOURS, 0) AS STE_OPS_HOURS,
	COALESCE(C.STE_ADD_HOURS, 0) AS STE_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	D.WONUM, D.REPORTDATE, D.ACTFINISH,
   	D.DATE_VALUE, D.STE_OPHOURS, D.STE_STARTTIME, D.STE_ENDTIME, D.ACT_STARTTIME, D.ACT_ENDTIME,
	D.ACT_OPHOURS,
   	D.STE_ADD_HOUR, D.STE_ADD_STARTTIME, D.STE_ADD_ENDTIME, D.ACT_ADD_STARTTIME, D.ACT_ADD_ENDTIME,
	D.ACT_ADD_HOUR
  FROM (
  	-- FOR COMPLETENESS: LIST OF ALL WEEKS
  	SELECT DISTINCT A.WEEK_YEAR, A.FIRST_DAY_WEEK, A.LAST_DAY_WEEK
	FROM MAXIMO.STE_DATE_LOOKUP A 
	WHERE 
		A.FIRST_DAY_WEEK<=P_ENDDATE AND A.LAST_DAY_WEEK>=P_STARTDATE
		-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		AND A.DATE_VALUE<=CURRENT_TIMESTAMP
  ) A
  JOIN (
  	-- FOR COMPLETENESS: LIST OF ALL LINES/SYSTEMS/SUBSYSTEMS
  	SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	FROM KPI_WORKORDER_OPSHOURS A
  ) B ON 1=1
  LEFT JOIN KPI_WORKORDER_OPSHOURS C ON C.WEEK_YEAR=A.WEEK_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN KPI_WORKORDER D ON P_SHOW_DETAIL=1
  	AND D.WEEK_YEAR=A.WEEK_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.WEEK_YEAR, D.WONUM, D.DATE_VALUE;

  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;
 
  -- FOR TROUBLESHOOTING	
  IF (UPPER(P_WONUM)='NULL' OR P_WONUM='') THEN SET P_WONUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;

  OPEN C1;

END;
/

--WORKORDER-MONTHLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_WORKORDER_OPSHOURS_MONTHLY(
	IN P_STARTMONTH VARCHAR(10), IN P_ENDMONTH VARCHAR(10),
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50),
	IN P_WONUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_WORKORDER_OPSHOURS_MONTHLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.10';
   DECLARE V_CURRENT_TS TIMESTAMP DEFAULT NULL;
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   WITH KPI_WORKORDER AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
	   		-- FILTER CURRENT DATE
	   	    SELECT 
	   	    	B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	   	    	B.FIRST_DAY_MONTH, B.LAST_DAY_MONTH, B.MONTH_YEAR,
	   	    	B.WONUM, B.ASSETNUM, B.REPORTDATE, B.ACTFINISH,
	   	    	B.DATE_VALUE, 
	   	    	B.STE_OPHOURS, B.STE_STARTTIME, B.STE_ENDTIME,
	   	    	CASE WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) AND B.ACT_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    	     ELSE B.ACT_STARTTIME
	   	    	END AS ACT_STARTTIME,
	   	    	CASE WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) THEN
	   	    		 	CASE WHEN B.ACT_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    		 	     WHEN B.ACT_ENDTIME<B.ACT_STARTTIME THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     WHEN B.ACT_ENDTIME>CAST(V_CURRENT_TS AS TIME) THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     ELSE B.ACT_ENDTIME
	   	    		 	END
	   	    	     ELSE B.ACT_ENDTIME
	   	    	END AS ACT_ENDTIME,
	   	    	B.STE_ADD_HOUR, B.STE_ADD_STARTTIME, B.STE_ADD_ENDTIME,
	   	    	CASE WHEN B.ACT_ADD_STARTTIME='00:00:00' THEN '00:00:00'
		   	    	 WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) AND B.ACT_ADD_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    	     ELSE B.ACT_ADD_STARTTIME
	   	    	END AS ACT_ADD_STARTTIME,
	   	    	CASE WHEN B.ACT_ADD_ENDTIME='00:00:00' THEN '00:00:00'
		   	    	 WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) THEN
	   	    		 	CASE WHEN B.ACT_ADD_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    		 	     WHEN B.ACT_ADD_ENDTIME<B.ACT_ADD_STARTTIME THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     WHEN B.ACT_ADD_ENDTIME>CAST(V_CURRENT_TS AS TIME) THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     ELSE B.ACT_ADD_ENDTIME
	   	    		 	END
	   	    	     ELSE B.ACT_ADD_ENDTIME
	   	    	END AS ACT_ADD_ENDTIME
	   	    FROM (
	   	    	-- GET ACTUAL START_TIME AND END_TIME
		       	SELECT
		           	A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
		           	-- A.LOCATION, B.TYPE, B.STATUS, A.STATUS, A.REPORTDATE, A.ACTFINISH,
					-- C.FIRST_DAY_WEEK, C.LAST_DAY_WEEK, C.WEEK_YEAR,
					C.FIRST_DAY_MONTH, C.LAST_DAY_MONTH, C.MONTH_YEAR,
		           	A.WONUM, A.ASSETNUM, A.REPORTDATE, A.ACTFINISH,
					C.DATE_VALUE, 
		           	COALESCE(D.STE_OPHOURS, 0) AS STE_OPHOURS,
		           	D.STE_STARTTIME, D.STE_ENDTIME,
					CASE
						-- FIRST DAY
						WHEN C.DATE_VALUE=CAST(A.REPORTDATE AS DATE) THEN 
							CASE 
								-- D.STE_STARTTIME>D.STE_ENDTIME
								WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
								WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
								-- ELSE 
								WHEN CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
								WHEN CAST(A.REPORTDATE AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME
								ELSE CAST(A.REPORTDATE AS TIME) 
							END
						ELSE D.STE_STARTTIME
					END AS ACT_STARTTIME,
					CASE
						-- LAST DAY
						WHEN C.DATE_VALUE=CAST(A.ACTFINISH AS DATE) THEN 
							CASE 
								-- D.STE_STARTTIME>D.STE_ENDTIME
								WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
								WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.ACTFINISH AS TIME)
								-- ELSE 
								WHEN CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME
								WHEN CAST(A.ACTFINISH AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME 
								ELSE CAST(A.ACTFINISH AS TIME) 
							END
						ELSE D.STE_ENDTIME
					END AS ACT_ENDTIME,
		           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
			       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
			       	CASE
				       	-- NO ADD HOUR
			           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
			           	-- FIRST DAY
			           	WHEN C.DATE_VALUE = CAST(A.REPORTDATE AS DATE) THEN 
							CASE
								-- E.STE_STARTTIME>E.STE_ENDTIME
								WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
								WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
								-- ELSE 
			               		WHEN CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
			               		WHEN CAST(A.REPORTDATE AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
			               		ELSE CAST(A.REPORTDATE AS TIME)
			           		END
			           	-- DEFAULT
			           	ELSE E.STE_STARTTIME
			       	END AS ACT_ADD_STARTTIME,
			       	CASE
				       	-- NO ADD HOUR
			           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
			           	-- LAST DAY
			           	WHEN C.DATE_VALUE = CAST(A.ACTFINISH AS DATE) THEN 
							CASE
								-- E.STE_STARTTIME>E.STE_ENDTIME
								WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
								WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.ACTFINISH AS TIME)
								-- ELSE 
			               		WHEN CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
			               		WHEN CAST(A.ACTFINISH AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
			               		ELSE CAST(A.ACTFINISH AS TIME)
			           	END
			           	-- DEFAULT
			           	ELSE E.STE_ENDTIME
			       	END AS ACT_ADD_ENDTIME,
			       	-- CHECK AGAINST DUPLICATE IN STE_OPS_HOURS
					ROW_NUMBER() OVER (PARTITION BY A.WONUM, C.DATE_VALUE ORDER BY D.STE_CREATEDATE DESC) AS RN
				FROM MAXIMO.WORKORDER A
				JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.LOCATION
				JOIN MAXIMO.STE_DATE_LOOKUP C 
					ON C.DATE_VALUE>=CAST(A.REPORTDATE AS DATE) AND C.DATE_VALUE<=CAST(COALESCE(A.ACTFINISH, V_CURRENT_TS) AS DATE)
				        -- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
				        AND C.DATE_VALUE<=V_CURRENT_TS
				LEFT JOIN MAXIMO.STE_OPS_HOURS D 
					-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
					ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
				    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
				    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
				LEFT JOIN MAXIMO.STE_ADD_HOURS E 
				    ON C.DATE_VALUE = E.STE_ADD_DATE
		           		AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
				WHERE 1=1 
				    AND A.STE_OPSEQPTFAILURE=1 
				    AND A.WOCLASS='WORKORDER'
				    AND A.STATUS NOT IN ('CAN','WAPPR','CLOSEWITHERROR') 
				    AND A.WORKTYPE='CM'
					AND B.STATUS IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCSTAT' AND MAXVALUE IN ('OPERATING')
					)
					AND C.MONTH_YEAR<=P_ENDMONTH AND C.MONTH_YEAR>=P_STARTMONTH
					AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
					AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
					AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
					AND (P_WONUM IS NULL OR A.WONUM=P_WONUM)
					-- AND A.ASSETNUM='1141'
					-- AND C.MONTH_YEAR<='2024/12' AND C.MONTH_YEAR>='2023/01'
					-- AND C.MONTH_YEAR='2024/08'
		   	) AS B
		   	WHERE B.RN=1
		) AS A
   ),
   KPI_WORKORDER_OPSHOURS AS (
	   SELECT
	       A.MONTH_YEAR,
	       A.STE_LINE,
	       A.STE_SYSTEM,
	       A.STE_SUBSYSTEM,
	       COUNT(DISTINCT A.WONUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_MONTH) AS FIRST_DAY_MONTH,
	       MAX(A.LAST_DAY_MONTH) AS LAST_DAY_MONTH,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_WORKORDER A
	   GROUP BY A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  )
  SELECT 
  	V_VERSION AS VERSION,
	A.MONTH_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	COALESCE(C.EQPTCOUNT, 0) AS EQPTCOUNT,
	A.FIRST_DAY_MONTH,
	A.LAST_DAY_MONTH,
	COALESCE(C.STE_OPS_HOURS, 0) AS STE_OPS_HOURS,
	COALESCE(C.STE_ADD_HOURS, 0) AS STE_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	D.WONUM, D.REPORTDATE, D.ACTFINISH,
   	D.DATE_VALUE, D.STE_OPHOURS, D.STE_STARTTIME, D.STE_ENDTIME, D.ACT_STARTTIME, D.ACT_ENDTIME,
	D.ACT_OPHOURS,
   	D.STE_ADD_HOUR, D.STE_ADD_STARTTIME, D.STE_ADD_ENDTIME, D.ACT_ADD_STARTTIME, D.ACT_ADD_ENDTIME,
	D.ACT_ADD_HOUR
  FROM (
  	-- FOR COMPLETENESS: LIST OF ALL MONTHS
  	SELECT DISTINCT A.MONTH_YEAR, A.FIRST_DAY_MONTH, A.LAST_DAY_MONTH
	FROM MAXIMO.STE_DATE_LOOKUP A 
	WHERE 
		A.MONTH_YEAR<=P_ENDMONTH AND A.MONTH_YEAR>=P_STARTMONTH
		-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		AND A.DATE_VALUE<=V_CURRENT_TS
  ) A
  JOIN (
  	-- FOR COMPLETENESS: LIST OF ALL LINES/SYSTEMS/SUBSYSTEMS
  	SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	FROM KPI_WORKORDER_OPSHOURS A
  ) B ON 1=1
  LEFT JOIN KPI_WORKORDER_OPSHOURS C 
  	ON C.MONTH_YEAR=A.MONTH_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN KPI_WORKORDER D ON P_SHOW_DETAIL=1
  	AND D.MONTH_YEAR=A.MONTH_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.MONTH_YEAR, D.WONUM, D.DATE_VALUE;

  SET V_CURRENT_TS=CURRENT_TIMESTAMP;
 
  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  -- default endmonth to current month
  IF (P_ENDMONTH IS NULL OR UPPER(P_ENDMONTH)='NULL' OR P_ENDMONTH='') THEN 
 	SET P_ENDMONTH=CONCAT(YEAR(V_CURRENT_TS),CONCAT('/',LPAD(MONTH(V_CURRENT_TS),2,'0'))); 
  END IF;
 
  -- FOR TROUBLESHOOTING	
  IF (UPPER(P_WONUM)='NULL' OR P_WONUM='') THEN SET P_WONUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;

  OPEN C1;

END;
/

-- WORKORDER-WEEKLY
CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_WORKORDER_OPSHOURS_WEEKLY(
	IN P_STARTDATE DATE, IN P_ENDDATE DATE,
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50),
	IN P_WONUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_WORKORDER_OPSHOURS_WEEKLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.2
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v1.10';
   DECLARE V_CURRENT_TS TIMESTAMP DEFAULT NULL;
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
  	WITH KPI_WORKORDER AS (
	   SELECT
       		A.*,
   			CASE WHEN A.ACT_ENDTIME<A.ACT_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ENDTIME-A.ACT_STARTTIME)/10000)) + (DECIMAL((A.ACT_ENDTIME-A.ACT_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_OPHOURS,
   			CASE WHEN A.ACT_ADD_ENDTIME<A.ACT_ADD_STARTTIME THEN
   				(FLOOR(('24:00:00'-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL(('24:00:00'-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60)
   				+ (FLOOR((A.ACT_ADD_ENDTIME-'00:00:00')/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-'00:00:00')%10000/100,5,0)/60)
   			ELSE
   				(FLOOR((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)/10000)) + (DECIMAL((A.ACT_ADD_ENDTIME-A.ACT_ADD_STARTTIME)%10000/100,5,0)/60) 
   			END	AS ACT_ADD_HOUR
	   FROM (
	   		-- FILTER CURRENT DATE
	   	    SELECT 
	   	    	B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	   	    	B.FIRST_DAY_WEEK, B.LAST_DAY_WEEK, B.WEEK_YEAR,
	   	    	B.WONUM, B.ASSETNUM, B.REPORTDATE, B.ACTFINISH,
	   	    	B.DATE_VALUE, 
	   	    	B.STE_OPHOURS, B.STE_STARTTIME, B.STE_ENDTIME,
	   	    	CASE WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) AND B.ACT_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    	     ELSE B.ACT_STARTTIME
	   	    	END AS ACT_STARTTIME,
	   	    	CASE WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) THEN
	   	    		 	CASE WHEN B.ACT_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    		 	     WHEN B.ACT_ENDTIME<B.ACT_STARTTIME THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     WHEN B.ACT_ENDTIME>CAST(V_CURRENT_TS AS TIME) THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     ELSE B.ACT_ENDTIME
	   	    		 	END
	   	    	     ELSE B.ACT_ENDTIME
	   	    	END AS ACT_ENDTIME,
	   	    	B.STE_ADD_HOUR, B.STE_ADD_STARTTIME, B.STE_ADD_ENDTIME,
	   	    	CASE WHEN B.ACT_ADD_STARTTIME='00:00:00' THEN '00:00:00'
		   	    	 WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) AND B.ACT_ADD_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    	     ELSE B.ACT_ADD_STARTTIME
	   	    	END AS ACT_ADD_STARTTIME,
	   	    	CASE WHEN B.ACT_ADD_ENDTIME='00:00:00' THEN '00:00:00'
		   	    	 WHEN B.DATE_VALUE=CAST(V_CURRENT_TS AS DATE) THEN
	   	    		 	CASE WHEN B.ACT_ADD_STARTTIME>CAST(V_CURRENT_TS AS TIME) THEN '00:00:00'
	   	    		 	     WHEN B.ACT_ADD_ENDTIME<B.ACT_ADD_STARTTIME THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     WHEN B.ACT_ADD_ENDTIME>CAST(V_CURRENT_TS AS TIME) THEN CAST(V_CURRENT_TS AS TIME)
	   	    		 	     ELSE B.ACT_ADD_ENDTIME
	   	    		 	END
	   	    	     ELSE B.ACT_ADD_ENDTIME
	   	    	END AS ACT_ADD_ENDTIME
	   	    FROM (
	   	    	-- GET ACTUAL START_TIME AND END_TIME
				SELECT 
					A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
					-- A.LOCATION, B.TYPE, B.STATUS, A.STATUS, A.REPORTDATE, A.ACTFINISH,
					C.FIRST_DAY_WEEK, C.LAST_DAY_WEEK, C.WEEK_YEAR,
					A.WONUM, A.ASSETNUM, A.REPORTDATE, A.ACTFINISH, 
					C.DATE_VALUE, 
		           	COALESCE(D.STE_OPHOURS, 0) AS STE_OPHOURS,
		           	D.STE_STARTTIME, D.STE_ENDTIME,
					CASE
						-- FIRST DAY
						WHEN C.DATE_VALUE=CAST(A.REPORTDATE AS DATE) THEN 
							CASE 
								-- D.STE_STARTTIME>D.STE_ENDTIME
								WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
								WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
								-- ELSE 
								WHEN CAST(A.REPORTDATE AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
								WHEN CAST(A.REPORTDATE AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME
								ELSE CAST(A.REPORTDATE AS TIME) 
							END
						ELSE D.STE_STARTTIME
					END AS ACT_STARTTIME,
					CASE
						-- LAST DAY
						WHEN C.DATE_VALUE=CAST(A.ACTFINISH AS DATE) THEN 
							CASE 
								-- D.STE_STARTTIME>D.STE_ENDTIME
								WHEN D.STE_STARTTIME>D.STE_ENDTIME AND CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME 
								WHEN D.STE_STARTTIME>D.STE_ENDTIME THEN CAST(A.ACTFINISH AS TIME)
								-- ELSE 
								WHEN CAST(A.ACTFINISH AS TIME)<D.STE_STARTTIME THEN D.STE_STARTTIME
								WHEN CAST(A.ACTFINISH AS TIME)>D.STE_ENDTIME THEN D.STE_ENDTIME 
								ELSE CAST(A.ACTFINISH AS TIME) 
							END
						ELSE D.STE_ENDTIME
					END AS ACT_ENDTIME,
		           	COALESCE(E.STE_ADD_HOUR, 0) AS STE_ADD_HOUR,
			       	E.STE_STARTTIME AS STE_ADD_STARTTIME, E.STE_ENDTIME AS STE_ADD_ENDTIME,
			       	CASE
				       	-- NO ADD HOUR
			           	WHEN E.STE_STARTTIME IS NULL THEN '00:00:00'
			           	-- FIRST DAY
			           	WHEN C.DATE_VALUE = CAST(A.REPORTDATE AS DATE) THEN 
							CASE
								-- E.STE_STARTTIME>E.STE_ENDTIME
								WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
								WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.REPORTDATE AS TIME)
								-- ELSE 
			               		WHEN CAST(A.REPORTDATE AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
			               		WHEN CAST(A.REPORTDATE AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
			               		ELSE CAST(A.REPORTDATE AS TIME)
			           		END
			           	-- DEFAULT
			           	ELSE E.STE_STARTTIME
			       	END AS ACT_ADD_STARTTIME,
			       	CASE
				       	-- NO ADD HOUR
			           	WHEN E.STE_ENDTIME IS NULL THEN '00:00:00'
			           	-- LAST DAY
			           	WHEN C.DATE_VALUE = CAST(A.ACTFINISH AS DATE) THEN 
							CASE
								-- E.STE_STARTTIME>E.STE_ENDTIME
								WHEN E.STE_STARTTIME>E.STE_ENDTIME AND CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME 
								WHEN E.STE_STARTTIME>E.STE_ENDTIME THEN CAST(A.ACTFINISH AS TIME)
								-- ELSE 
			               		WHEN CAST(A.ACTFINISH AS TIME)<E.STE_STARTTIME THEN E.STE_STARTTIME
			               		WHEN CAST(A.ACTFINISH AS TIME)>E.STE_ENDTIME THEN E.STE_ENDTIME
			               		ELSE CAST(A.ACTFINISH AS TIME)
			           	END
			           	-- DEFAULT
			           	ELSE E.STE_ENDTIME
			       	END AS ACT_ADD_ENDTIME,
			       	-- CHECK AGAINST DUPLICATE IN STE_OPS_HOURS
					ROW_NUMBER() OVER (PARTITION BY A.WONUM, C.DATE_VALUE ORDER BY D.STE_CREATEDATE DESC) AS RN
				FROM MAXIMO.WORKORDER A
				JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.LOCATION
				JOIN MAXIMO.STE_DATE_LOOKUP C 
					ON C.DATE_VALUE>=CAST(A.REPORTDATE AS DATE) AND C.DATE_VALUE<=CAST(COALESCE(A.ACTFINISH, V_CURRENT_TS) AS DATE)
				        -- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
				        AND C.DATE_VALUE<=V_CURRENT_TS
				LEFT JOIN MAXIMO.STE_OPS_HOURS D 
					-- USE STE_STARTMONTH/STE_ENDMONTH INSTEAD OF STE_VALIDFRM/STE_VALIDTO
					ON C.MONTH_YEAR<=D.STE_ENDMONTH AND C.MONTH_YEAR>=D.STE_STARTMONTH
				    -- ON C.DATE_VALUE<=D.STE_VALIDTO AND C.DATE_VALUE>=D.STE_VALIDFRM
				    	AND D.STE_LINE=A.STE_LINE AND D.STE_SYSTEM=A.STE_SYSTEM AND D.STE_SUBSYSTEM=A.STE_SUBSYSTEM
				LEFT JOIN MAXIMO.STE_ADD_HOURS E 
				    ON C.DATE_VALUE=E.STE_ADD_DATE
				    	AND E.STE_LINE=A.STE_LINE AND E.STE_SYSTEM=A.STE_SYSTEM AND E.STE_SUBSYSTEM=A.STE_SUBSYSTEM
				WHERE 1=1
					AND A.STE_OPSEQPTFAILURE=1 
				    AND A.WOCLASS='WORKORDER'
					AND A.STATUS NOT IN ('CAN','WAPPR','CLOSEWITHERROR') 
					AND A.WORKTYPE='CM' 
					AND B.STATUS IN (
						SELECT VALUE 
						FROM MAXIMO.synonymdomain
						WHERE domainid = 'LOCSTAT' AND MAXVALUE IN ('OPERATING')
					)
					AND C.FIRST_DAY_WEEK<=P_ENDDATE AND C.LAST_DAY_WEEK>=P_STARTDATE
					AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
					AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
					AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
					AND (P_WONUM IS NULL OR A.WONUM=P_WONUM)
					-- AND C.FIRST_DAY_WEEK<='2024-08-31' AND C.LAST_DAY_WEEK>='2024-07-01'
					-- AND A.ASSETNUM='1141'
					-- AND C.MONTH_YEAR='2024/08'
		   	) AS B
		   	WHERE B.RN=1
		) AS A
	),
   	KPI_WORKORDER_OPSHOURS AS (
	   SELECT
	       A.WEEK_YEAR,
	       A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	       COUNT(DISTINCT A.WONUM) AS EQPTCOUNT,
	       MIN(A.FIRST_DAY_WEEK) AS FIRST_DAY_WEEK,
	       MAX(A.LAST_DAY_WEEK) AS LAST_DAY_WEEK,
	       SUM(CAST(CASE WHEN A.ACT_OPHOURS<0 THEN 0
					 WHEN A.ACT_OPHOURS>A.STE_OPHOURS THEN A.STE_OPHOURS
					 ELSE A.ACT_OPHOURS
				END AS BIGINT)) AS STE_OPS_HOURS,
	       SUM(CAST(CASE WHEN A.ACT_ADD_HOUR<0 THEN 0
					 WHEN A.ACT_ADD_HOUR>A.STE_ADD_HOUR THEN A.STE_ADD_HOUR
					 -- OPSHOUR+ADD_HOUR -> CAPPED TO 24 HOURS/DAY
					 WHEN A.STE_OPHOURS+A.ACT_ADD_HOUR>24 THEN 24-A.STE_OPHOURS
					 ELSE A.ACT_ADD_HOUR
				END AS BIGINT)) AS STE_ADD_HOURS
	   FROM KPI_WORKORDER A
	   GROUP BY A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	)
  SELECT 
  	V_VERSION AS VERSION,
	A.WEEK_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	COALESCE(C.EQPTCOUNT, 0) AS EQPTCOUNT,
	A.FIRST_DAY_WEEK,
	A.LAST_DAY_WEEK,
	COALESCE(C.STE_OPS_HOURS, 0) AS STE_OPS_HOURS,
	COALESCE(C.STE_ADD_HOURS, 0) AS STE_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	D.WONUM, D.REPORTDATE, D.ACTFINISH,
   	D.DATE_VALUE, D.STE_OPHOURS, D.STE_STARTTIME, D.STE_ENDTIME, D.ACT_STARTTIME, D.ACT_ENDTIME,
	D.ACT_OPHOURS,
   	D.STE_ADD_HOUR, D.STE_ADD_STARTTIME, D.STE_ADD_ENDTIME, D.ACT_ADD_STARTTIME, D.ACT_ADD_ENDTIME,
	D.ACT_ADD_HOUR
  FROM (
  	-- MASTER LIST OF WEEKS
  	SELECT DISTINCT A.WEEK_YEAR, A.FIRST_DAY_WEEK, A.LAST_DAY_WEEK
	FROM MAXIMO.STE_DATE_LOOKUP A 
	WHERE 
		A.FIRST_DAY_WEEK<=P_ENDDATE AND A.LAST_DAY_WEEK>=P_STARTDATE
		-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
		AND A.DATE_VALUE<=V_CURRENT_TS
  ) A
  JOIN (
  	-- MASTER LIST OF LINE/SYSTEM/SUBSYSTEM
  	SELECT DISTINCT A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  	FROM KPI_WORKORDER_OPSHOURS A
  ) B ON 1=1
  LEFT JOIN KPI_WORKORDER_OPSHOURS C ON
  	C.WEEK_YEAR=A.WEEK_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN KPI_WORKORDER D ON P_SHOW_DETAIL=1
  	AND D.WEEK_YEAR=A.WEEK_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.WEEK_YEAR, D.WONUM, D.DATE_VALUE; 

  SET V_CURRENT_TS=CURRENT_TIMESTAMP;

  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  -- default enddate to current_date
  -- important: by default, p_enddate should be on sunday. but if default to current_date, it could be any day
  IF (P_ENDDATE IS NULL) THEN SET P_ENDDATE=V_CURRENT_TS; END IF;
 
  -- FOR TROUBLESHOOTING	
  IF (UPPER(P_WONUM)='NULL' OR P_WONUM='') THEN SET P_WONUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;

  OPEN C1;

END;
/

--#SET TERMINATOR ;

CALL MIGRATION.STE_FINISH_PATCH('20250501-01-RPT-UPDATE');