CALL MIGRATION.STE_START_PATCH('20250815-01-OPS-REPORTS');

-- DROP PROCEDURE MAXIMO.PRC_RPT_ASSET_OPSHOURS_WEEKLY;

--#SET TERMINATOR /

CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_ASSET_OPSHOURS_WEEKLY(
	IN P_STARTDATE DATE, IN P_ENDDATE DATE,
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50), IN P_CODE VARCHAR(10),
	IN P_ASSETNUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_ASSET_OPSHOURS_WEEKLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version 1.3
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v2.0';
  
   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   	WITH ASSETS AS (
   		SELECT 
   			A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
			MAX(COALESCE(F.STE_OPS_BI, 0)) AS STE_OPS_BI,
			MAX(COALESCE(F.STE_OPS_MSS, 0)) AS STE_OPS_MSS, 
			MAX(COALESCE(F.STE_OPS_WSS, 0)) AS STE_OPS_WSS,
   			COUNT(*) AS EQPTCOUNT 
   		FROM MAXIMO.ASSET A
		JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.LOCATION
		LEFT JOIN MAXIMO.STE_OPS F 
			ON F.STE_LINE=A.STE_LINE AND F.STE_SYSTEM=A.STE_SYSTEM AND F.STE_SUBSYSTEM=A.STE_SUBSYSTEM
   		WHERE 1=1
			AND A.STE_OPS=1 
			AND A.STATUS IN (
				SELECT VALUE 
				FROM MAXIMO.synonymdomain
				WHERE domainid = 'LOCASSETSTATUS' AND MAXVALUE IN ('OPERATING')
			)	 
			AND B.STATUS IN (
				SELECT VALUE 
				FROM MAXIMO.synonymdomain
				WHERE domainid = 'LOCSTAT' AND MAXVALUE IN ('OPERATING')
			)
			AND B.TYPE IN (
				SELECT VALUE 
				FROM MAXIMO.synonymdomain
				WHERE domainid = 'LOCTYPE' AND MAXVALUE IN ('OPERATING')
			)
			AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
			AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
			AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
			-- FILTER OUT INVALID DATA
			AND A.STE_LINE IS NOT NULL AND A.STE_SYSTEM IS NOT NULL AND A.STE_SUBSYSTEM IS NOT NULL
			-- EMPTY VALUES
			AND ((P_CODE='BI' AND F.STE_OPS_BI IS NOT NULL)
				 OR (P_CODE='WSS' AND F.STE_OPS_WSS IS NOT NULL)
				 OR (P_CODE='MSS' AND F.STE_OPS_MSS IS NOT NULL))
		GROUP BY A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
   	),
   	WEEKYEAR AS (
   		SELECT C.WEEK_YEAR, MIN(C.FIRST_DAY_WEEK) AS FIRST_DAY_WEEK, MAX(C.LAST_DAY_WEEK) AS LAST_DAY_WEEK
   		FROM MAXIMO.STE_DATE_LOOKUP C 
		WHERE 1=1
			AND C.FIRST_DAY_WEEK<=P_ENDDATE AND C.LAST_DAY_WEEK>=P_STARTDATE
			-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
			AND C.DATE_VALUE<=CURRENT_TIMESTAMP
		GROUP BY C.WEEK_YEAR
   	),
   	OPSHOURS AS (
   		SELECT 
   			A.WEEK_YEAR,
   			B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, B.STE_VALIDFRM, B.STE_VALIDTO,
   			CAST(CASE WHEN B.STE_VALIDFRM<=A.FIRST_DAY_WEEK THEN A.FIRST_DAY_WEEK ELSE B.STE_VALIDFRM END AS DATE) AS VALIDFRM,
   			CAST(CASE WHEN B.STE_VALIDTO>=A.LAST_DAY_WEEK THEN A.LAST_DAY_WEEK ELSE B.STE_VALIDTO END AS DATE) AS VALIDTO,
   			COALESCE(B.STE_OPHOURS, 0) AS OPSHOURS
   		FROM WEEKYEAR A
   		JOIN MAXIMO.STE_OPS_HOURS B
   		 	ON ((B.STE_VALIDFRM<=A.FIRST_DAY_WEEK AND B.STE_VALIDTO>A.FIRST_DAY_WEEK) 
   		 		OR (B.STE_VALIDTO>=A.LAST_DAY_WEEK AND B.STE_VALIDFRM<A.LAST_DAY_WEEK))
   		 	AND B.STE_VALIDTO>=B.STE_VALIDFRM
   		WHERE 1=1
			AND (P_LINE IS NULL OR B.STE_LINE=P_LINE)
			AND (P_SYSTEM IS NULL OR B.STE_SYSTEM=P_SYSTEM)
			AND (P_SUBSYSTEM IS NULL OR B.STE_SUBSYSTEM=P_SUBSYSTEM)
			-- FILTER OUT INVALID DATA
			AND B.STE_LINE IS NOT NULL AND B.STE_SYSTEM IS NOT NULL AND B.STE_SUBSYSTEM IS NOT NULL
   	),
   	ADDHOURS AS (
   		SELECT
   			A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.VALIDFRM, A.VALIDTO,
   			SUM(STE_ADD_HOUR) AS ADDHOURS
   		FROM OPSHOURS A
   		JOIN MAXIMO.STE_ADD_HOURS B 
	    	ON B.STE_ADD_DATE>=A.VALIDFRM AND B.STE_ADD_DATE<=A.VALIDTO
	    	AND B.STE_LINE=A.STE_LINE AND B.STE_SYSTEM=A.STE_SYSTEM AND B.STE_SUBSYSTEM=A.STE_SUBSYSTEM
	    GROUP BY A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.VALIDFRM, A.VALIDTO
   	)
  SELECT 
  	V_VERSION AS VERSION,
	A.WEEK_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
	B.EQPTCOUNT,
	A.FIRST_DAY_WEEK,
	A.LAST_DAY_WEEK,
	7 AS NUM_OF_DAYS,
	COALESCE(C.OPSHOURS, 0) * B.EQPTCOUNT AS STE_OPS_HOURS,
	COALESCE(D.ADDHOURS, 0) * B.EQPTCOUNT AS STE_ADD_HOURS,
	B.STE_OPS_BI, B.STE_OPS_MSS, B.STE_OPS_WSS,
	COALESCE(C.OPSHOURS, 0) AS WEEKLY_OPS_HOURS,
	DECIMAL(COALESCE(C.OPSHOURS, 0)/7,16,2) AS DAILY_OPS_HOURS,
	COALESCE(D.ADDHOURS, 0) AS WEEKLY_ADD_HOURS,
	-- FOR TROUBLESHOOTING
	E.STE_VALIDFRM AS OPSHOURS_VALIDFRM, 
	E.STE_VALIDTO AS OPSHOURS_VALIDTO, 
	E.VALIDFRM AS ACT_VALIDFRM, E.VALIDTO AS ACT_VALIDTO, (E.VALIDTO-E.VALIDFRM+1) AS NUM_OF_DAYS2, 
	E.OPSHOURS, F.ADDHOURS
  FROM WEEKYEAR A
  JOIN ASSETS B ON 1=1
  LEFT JOIN (
  	SELECT
  		A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
  		SUM(A.OPSHOURS * (A.VALIDTO-A.VALIDFRM+1)) AS OPSHOURS
  	FROM OPSHOURS A
  	GROUP BY A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  ) C ON C.WEEK_YEAR=A.WEEK_YEAR
  	AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  LEFT JOIN (
  	SELECT
  		A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
  		SUM(A.ADDHOURS * (A.VALIDTO-A.VALIDFRM+1)) AS ADDHOURS
  	FROM ADDHOURS A
  	GROUP BY A.WEEK_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
  ) D ON D.WEEK_YEAR=A.WEEK_YEAR
  	AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  -- FOR TROUBLESHOOTING
  LEFT JOIN OPSHOURS E ON P_SHOW_DETAIL=1
  	AND E.WEEK_YEAR=A.WEEK_YEAR
  	AND E.STE_LINE=B.STE_LINE AND E.STE_SYSTEM=B.STE_SYSTEM AND E.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  LEFT JOIN ADDHOURS F ON P_SHOW_DETAIL=1
  	AND F.WEEK_YEAR=A.WEEK_YEAR
  	AND F.STE_LINE=B.STE_LINE AND F.STE_SYSTEM=B.STE_SYSTEM AND F.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  	AND F.VALIDFRM=E.VALIDFRM AND F.VALIDTO=E.VALIDTO
  ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.WEEK_YEAR, E.VALIDFRM, E.VALIDTO
  ; 

  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  -- default enddate to current_date
  -- important: by default, p_enddate should be on sunday. but if default to current_date, it could be any day
  IF (P_ENDDATE IS NULL) THEN SET P_ENDDATE=CURRENT_TIMESTAMP; END IF;
 
  -- FOR TROUBLESHOOTING	
  --IF (UPPER(P_ASSETNUM)='NULL' OR P_ASSETNUM='') THEN SET P_ASSETNUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;
 
  OPEN C1;

END;
/

-- CALL MAXIMO.PRC_RPT_ASSET_OPSHOURS_WEEKLY('2025-01-01', '2025-12-31', 'NEL', 'AFC', 'AG', 'MSS', NULL, 1);

-- DROP PROCEDURE MAXIMO.PRC_RPT_ASSET_OPSHOURS_MONTHLY;

--#SET TERMINATOR /

CREATE OR REPLACE PROCEDURE MAXIMO.PRC_RPT_ASSET_OPSHOURS_MONTHLY(
	IN P_STARTMONTH VARCHAR(10), IN P_ENDMONTH VARCHAR(10),
	IN P_LINE VARCHAR(8), IN P_SYSTEM VARCHAR(50), IN P_SUBSYSTEM VARCHAR(50), IN P_CODE VARCHAR(10),
	IN P_ASSETNUM VARCHAR(16), IN P_SHOW_DETAIL SMALLINT 
)
LANGUAGE SQL
SPECIFIC PRC_RPT_ASSET_OPSHOURS_MONTHLY
DYNAMIC RESULT SETS 1
READS SQL DATA
BEGIN
   -- version
   DECLARE V_VERSION VARCHAR(10) DEFAULT 'v2.0';

   DECLARE C1 CURSOR WITH RETURN TO CLIENT FOR
   	WITH ASSETS AS (
   		SELECT 
   			A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
			MAX(COALESCE(F.STE_OPS_BI, 0)) AS STE_OPS_BI,
			MAX(COALESCE(F.STE_OPS_MSS, 0)) AS STE_OPS_MSS, 
			MAX(COALESCE(F.STE_OPS_WSS, 0)) AS STE_OPS_WSS,
   			COUNT(*) AS EQPTCOUNT 
   		FROM MAXIMO.ASSET A
		JOIN MAXIMO.LOCATIONS B ON B.LOCATION=A.LOCATION
		LEFT JOIN MAXIMO.STE_OPS F 
			ON F.STE_LINE=A.STE_LINE AND F.STE_SYSTEM=A.STE_SYSTEM AND F.STE_SUBSYSTEM=A.STE_SUBSYSTEM
   		WHERE 1=1
			AND A.STE_OPS=1 
			AND A.STATUS IN (
				SELECT VALUE 
				FROM MAXIMO.synonymdomain
				WHERE domainid = 'LOCASSETSTATUS' AND MAXVALUE IN ('OPERATING')
			)	 
			AND B.STATUS IN (
				SELECT VALUE 
				FROM MAXIMO.synonymdomain
				WHERE domainid = 'LOCSTAT' AND MAXVALUE IN ('OPERATING')
			)
			AND B.TYPE IN (
				SELECT VALUE 
				FROM MAXIMO.synonymdomain
				WHERE domainid = 'LOCTYPE' AND MAXVALUE IN ('OPERATING')
			)
			AND (P_LINE IS NULL OR A.STE_LINE=P_LINE)
			AND (P_SYSTEM IS NULL OR A.STE_SYSTEM=P_SYSTEM)
			AND (P_SUBSYSTEM IS NULL OR A.STE_SUBSYSTEM=P_SUBSYSTEM)
			-- FILTER OUT INVALID DATA
			AND A.STE_LINE IS NOT NULL AND A.STE_SYSTEM IS NOT NULL AND A.STE_SUBSYSTEM IS NOT NULL
			-- EMPTY VALUES
			AND ((P_CODE='BI' AND F.STE_OPS_BI IS NOT NULL)
				 OR (P_CODE='WSS' AND F.STE_OPS_WSS IS NOT NULL)
				 OR (P_CODE='MSS' AND F.STE_OPS_MSS IS NOT NULL))
		GROUP BY A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
   	),
   	MONTHYEAR AS (
   		SELECT C.MONTH_YEAR, MIN(C.FIRST_DAY_MONTH) AS FIRST_DAY_MONTH, MAX(C.LAST_DAY_MONTH) AS LAST_DAY_MONTH
   		FROM MAXIMO.STE_DATE_LOOKUP C 
		WHERE 1=1
			AND C.MONTH_YEAR<=P_ENDMONTH AND C.MONTH_YEAR>=P_STARTMONTH
			-- DONT SHOW DATA BEYOND TODAY -> EMPTY ANYWAY
			AND C.DATE_VALUE<=CURRENT_TIMESTAMP
		GROUP BY C.MONTH_YEAR
   	),
   	OPSHOURS AS (
   		SELECT 
   			A.MONTH_YEAR,
   			B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, B.STE_VALIDFRM, B.STE_VALIDTO,
   			CAST(CASE WHEN B.STE_VALIDFRM<=A.FIRST_DAY_MONTH THEN A.FIRST_DAY_MONTH ELSE B.STE_VALIDFRM END AS DATE) AS VALIDFRM,
   			CAST(CASE WHEN B.STE_VALIDTO>=A.LAST_DAY_MONTH THEN A.LAST_DAY_MONTH ELSE B.STE_VALIDTO END AS DATE) AS VALIDTO,
   			COALESCE(B.STE_OPHOURS, 0) AS OPSHOURS
   		FROM MONTHYEAR A
   		JOIN MAXIMO.STE_OPS_HOURS B
   		 	ON ((B.STE_VALIDFRM<=A.FIRST_DAY_MONTH AND B.STE_VALIDTO>A.FIRST_DAY_MONTH) 
   		 		OR (B.STE_VALIDTO>=A.LAST_DAY_MONTH AND B.STE_VALIDFRM<A.LAST_DAY_MONTH))
   		 	AND B.STE_VALIDTO>=B.STE_VALIDFRM
   		WHERE 1=1
			AND (P_LINE IS NULL OR B.STE_LINE=P_LINE)
			AND (P_SYSTEM IS NULL OR B.STE_SYSTEM=P_SYSTEM)
			AND (P_SUBSYSTEM IS NULL OR B.STE_SUBSYSTEM=P_SUBSYSTEM)
			-- FILTER OUT INVALID DATA
			AND B.STE_LINE IS NOT NULL AND B.STE_SYSTEM IS NOT NULL AND B.STE_SUBSYSTEM IS NOT NULL
   	),
   	ADDHOURS AS (
   		SELECT
   			A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.VALIDFRM, A.VALIDTO,
   			SUM(STE_ADD_HOUR) AS ADDHOURS
   		FROM OPSHOURS A
   		JOIN MAXIMO.STE_ADD_HOURS B 
	    	ON B.STE_ADD_DATE>=A.VALIDFRM AND B.STE_ADD_DATE<=A.VALIDTO
	    	AND B.STE_LINE=A.STE_LINE AND B.STE_SYSTEM=A.STE_SYSTEM AND B.STE_SUBSYSTEM=A.STE_SUBSYSTEM
	    GROUP BY A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM, A.VALIDFRM, A.VALIDTO
   	)
  	SELECT 
	  	V_VERSION AS VERSION,
		A.MONTH_YEAR, B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM,
		B.EQPTCOUNT,
		A.FIRST_DAY_MONTH,
		A.LAST_DAY_MONTH,
		(A.LAST_DAY_MONTH-A.FIRST_DAY_MONTH+1) AS NUM_OF_DAYS,
		COALESCE(C.OPSHOURS, 0) * B.EQPTCOUNT AS STE_OPS_HOURS,
		COALESCE(D.ADDHOURS, 0) * B.EQPTCOUNT AS STE_ADD_HOURS,
		B.STE_OPS_BI, B.STE_OPS_MSS, B.STE_OPS_WSS,
		COALESCE(C.OPSHOURS, 0) AS MONTHLY_OPS_HOURS,
		DECIMAL(COALESCE(C.OPSHOURS, 0)/(A.LAST_DAY_MONTH-A.FIRST_DAY_MONTH+1),16,2) AS DAILY_OPS_HOURS,
		COALESCE(D.ADDHOURS, 0) AS MONTHLY_ADD_HOURS,
		-- FOR TROUBLESHOOTING
		E.STE_VALIDFRM AS OPSHOURS_VALIDFRM, 
		E.STE_VALIDTO AS OPSHOURS_VALIDTO, 
		E.VALIDFRM AS ACT_VALIDFRM, E.VALIDTO AS ACT_VALIDTO, (E.VALIDTO-E.VALIDFRM+1) AS NUM_OF_DAYS2, 
		E.OPSHOURS, F.ADDHOURS
    FROM MONTHYEAR A
  	JOIN ASSETS B ON 1=1
  	LEFT JOIN (
  		SELECT
	  		A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	  		SUM(A.OPSHOURS * (A.VALIDTO-A.VALIDFRM+1)) AS OPSHOURS
	  	FROM OPSHOURS A
	  	GROUP BY A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
    ) C ON C.MONTH_YEAR=A.MONTH_YEAR
  		AND C.STE_LINE=B.STE_LINE AND C.STE_SYSTEM=B.STE_SYSTEM AND C.STE_SUBSYSTEM=B.STE_SUBSYSTEM
    LEFT JOIN (
	  	SELECT
	  		A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM,
	  		SUM(A.ADDHOURS * (A.VALIDTO-A.VALIDFRM+1)) AS ADDHOURS
	  	FROM ADDHOURS A
	  	GROUP BY A.MONTH_YEAR, A.STE_LINE, A.STE_SYSTEM, A.STE_SUBSYSTEM
    ) D ON D.MONTH_YEAR=A.MONTH_YEAR
  		AND D.STE_LINE=B.STE_LINE AND D.STE_SYSTEM=B.STE_SYSTEM AND D.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  		-- FOR TROUBLESHOOTING
  	LEFT JOIN OPSHOURS E ON P_SHOW_DETAIL=1
	  	AND E.MONTH_YEAR=A.MONTH_YEAR
	  	AND E.STE_LINE=B.STE_LINE AND E.STE_SYSTEM=B.STE_SYSTEM AND E.STE_SUBSYSTEM=B.STE_SUBSYSTEM
  	LEFT JOIN ADDHOURS F ON P_SHOW_DETAIL=1
	  	AND F.MONTH_YEAR=A.MONTH_YEAR
	  	AND F.STE_LINE=B.STE_LINE AND F.STE_SYSTEM=B.STE_SYSTEM AND F.STE_SUBSYSTEM=B.STE_SUBSYSTEM
	  	AND F.VALIDFRM=E.VALIDFRM AND F.VALIDTO=E.VALIDTO
  	ORDER BY B.STE_LINE, B.STE_SYSTEM, B.STE_SUBSYSTEM, A.MONTH_YEAR, E.VALIDFRM, E.VALIDTO
  	; 
   	
  IF (UPPER(P_LINE)='NULL' OR P_LINE='') THEN SET P_LINE=NULL; END IF;
  IF (UPPER(P_SYSTEM)='NULL' OR P_SYSTEM='') THEN SET P_SYSTEM=NULL; END IF;
  IF (UPPER(P_SUBSYSTEM)='NULL' OR P_SUBSYSTEM='') THEN SET P_SUBSYSTEM=NULL; END IF;

  -- default endmonth to current month
  IF (UPPER(P_ENDMONTH)='NULL' OR P_ENDMONTH='') THEN 
 	SET P_ENDMONTH=CONCAT(YEAR(CURRENT_TIMESTAMP),CONCAT('/',LPAD(MONTH(CURRENT_TIMESTAMP),2,'0'))); 
  END IF;

  -- FOR TROUBLESHOOTING	
  --IF (UPPER(P_ASSETNUM)='NULL' OR P_ASSETNUM='') THEN SET P_ASSETNUM=NULL; END IF;
  --IF (UPPER(P_SHOW_DETAIL)='0' OR P_SHOW_DETAIL='') THEN SET P_SHOW_DETAIL=NULL; END IF;
 
  OPEN C1;

END;
/

-- CALL MAXIMO.PRC_RPT_ASSET_OPSHOURS_MONTHLY('2025/01', '2025/12', 'NEL', 'AFC', 'AG', 'BI', NULL, 0);


CALL MIGRATION.STE_FINISH_PATCH('20250815-01-OPS-REPORTS');